// ts2fable 0.0.0
module rec Cytoscape
open Fable.Core
open Fable.Core.JS
open Browser.Types

//let [<Import("*","cytoscape")>] cytoscape: Cytoscape.IExports = jsNative
let [<Import("default","cytoscape")>] cytoscape: ?options: Cytoscape.CytoscapeOptions -> Cytoscape.Core = jsNative
let [<Import("default","cytoscape")>] cytoscapeModuleImport: Cytoscape.IModuleUse = jsNative

type [<AllowNullLiteral>] IExports =
    abstract cytoscape: ?options: Cytoscape.CytoscapeOptions -> Cytoscape.Core
    abstract cytoscape: extensionName: string * foo: string * bar: obj option -> Cytoscape.Core

module Cytoscape =

    type [<AllowNullLiteral>] IModuleUse =
        /// <summary>Register imported extension into cytoscape</summary>
        /// <param name="module">Entry point for the extension, got by module = require('cy-ext')
        /// or by import module from 'cy-ext'
        /// http://js.cytoscape.org/#extensions</param>
        abstract ``use``: ``module``: Ext -> unit

    type [<AllowNullLiteral>] Position =
        abstract x: float with get, set
        abstract y: float with get, set

    type CssStyleDeclaration =
        obj option

    type [<AllowNullLiteral>] ElementDefinition =
        abstract group: ElementGroup option with get, set
        abstract data: U2<NodeDataDefinition, EdgeDataDefinition> with get, set
        /// Scratchpad data (usually temp or nonserialisable data)
        abstract scatch: Scratchpad option with get, set
        /// The model position of the node (optional on init, mandatory after)
        abstract position: Position option with get, set
        /// can alternatively specify position in rendered on-screen pixels
        abstract renderedPosition: Position option with get, set
        /// Whether the element is selected (default false)
        abstract selected: bool option with get, set
        /// Whether the selection state is mutable (default true)
        abstract selectable: bool option with get, set
        /// When locked a node's position is immutable (default false)
        abstract locked: bool option with get, set
        /// Wether the node can be grabbed and moved by the user
        abstract grabbable: bool option with get, set
        /// a space separated list of class names that the element has
        abstract classes: string option with get, set
        /// CssStyleDeclaration;
        abstract style: CssStyleDeclaration option with get, set
        /// you should only use `style`/`css` for very special cases; use classes instead
        abstract css: U2<Css.Node, Css.Edge> option with get, set

    type [<AllowNullLiteral>] ElementDataDefinition =
        /// elided id => autogenerated id
        abstract id: string option with get, set
        abstract position: Position option with get, set

    type [<AllowNullLiteral>] EdgeDefinition =
        inherit ElementDefinition
        abstract data: EdgeDataDefinition with get, set

    type [<AllowNullLiteral>] EdgeDataDefinition =
        inherit ElementDataDefinition
        abstract id: string option with get, set
        /// the source node id (edge comes from this node)
        abstract source: string with get, set
        /// the target node id (edge goes to this node)
        abstract target: string with get, set
        [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set

    type [<AllowNullLiteral>] NodeDefinition =
        inherit ElementDefinition
        abstract data: NodeDataDefinition with get, set

    type [<AllowNullLiteral>] NodeDataDefinition =
        inherit ElementDataDefinition
        abstract id: string option with get, set
        abstract parent: string option with get, set
        [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set

    type [<AllowNullLiteral>] CytoscapeOptions =
        /// A HTML DOM element in which the graph should be rendered.
        /// This is optional if Cytoscape.js is run headlessly or if you initialise using jQuery (in which case your jQuery object already has an associated DOM element).
        /// 
        /// The default is undefined.
        abstract container: HTMLElement option with get, set
        /// An array of [[Elements]] specified as plain objects. For convenience, this option can alternatively be specified as a promise that resolves to the elements JSON.
        abstract elements: U4<ElementsDefinition, ResizeArray<ElementDefinition>, Promise<ElementsDefinition>, Promise<ResizeArray<ElementDefinition>>> option with get, set
        /// The [[Stylesheet]] used to style the graph. For convenience, this option can alternatively be specified as a promise that resolves to the stylesheet.
        abstract style: U2<ResizeArray<Stylesheet>, Promise<ResizeArray<Stylesheet>>> option with get, set
        /// A plain object that specifies layout options.
        /// Which layout is initially run is specified by the name field.
        /// Refer to a layout's documentation for the options it supports.
        /// If you want to specify your node positions yourself in your elements JSON,
        /// you can use the preset layout — by default it does not set any positions,
        /// leaving your nodes in their current positions
        /// (e.g. specified in options.elements at initialisation time)
        abstract layout: LayoutOptions option with get, set
        /// The initial zoom level of the graph.
        /// Make sure to disable viewport manipulation options, such as fit, in your layout so that it is not overridden when the layout is applied.
        /// You can set options.minZoom and options.maxZoom to set restrictions on the zoom level.
        /// 
        /// The default value is 1.
        abstract zoom: float option with get, set
        /// The initial panning position of the graph. Make sure to disable viewport manipulation options, such as fit,
        /// in your layout so that it is not overridden when the layout is applied.
        abstract pan: Position option with get, set
        /// A minimum bound on the zoom level of the graph. The viewport can not be scaled smaller than this zoom level.
        /// 
        /// The default value is 1e-50.
        abstract minZoom: float option with get, set
        /// A maximum bound on the zoom level of the graph. The viewport can not be scaled larger than this zoom level.
        /// 
        /// The default value is 1e50.
        abstract maxZoom: float option with get, set
        /// Whether zooming the graph is enabled, both by user events and programmatically.
        /// 
        /// The default value is true.
        abstract zoomingEnabled: bool option with get, set
        /// Whether user events (e.g. mouse wheel, pinch-to-zoom) are allowed to zoom the graph. Programmatic changes to zoom are unaffected by this option.
        /// 
        /// The default value is true.
        abstract userZoomingEnabled: bool option with get, set
        /// Whether panning the graph is enabled, both by user events and programmatically.
        /// 
        /// The default value is true.
        abstract panningEnabled: bool option with get, set
        /// Whether user events (e.g. dragging the graph background) are allowed to pan the graph. Programmatic changes to pan are unaffected by this option.
        /// 
        /// The default value is true.
        abstract userPanningEnabled: bool option with get, set
        /// Whether box selection (i.e. drag a box overlay around, and release it to select) is enabled. If enabled, the user must taphold to pan the graph.
        /// 
        /// The default value is false.
        abstract boxSelectionEnabled: bool option with get, set
        /// A string indicating the selection behaviour from user input.
        /// By default, this is set automatically for you based on the type of input device detected.
        /// On touch devices, 'additive' is default — a new selection made by the user adds to the set of currenly selected elements.
        /// On mouse-input devices, 'single' is default — a new selection made by the user becomes the entire set of currently selected elements (i.e. the previous elements are unselected).
        /// 
        /// The default value is (isTouchDevice ? 'additive' : 'single').
        abstract selectionType: SelectionType option with get, set
        /// A nonnegative integer that indicates the maximum allowable distance that a user may move during a tap gesture,
        /// on touch devices and desktop devices respectively.
        /// 
        /// This makes tapping easier for users.
        /// These values have sane defaults, so it is not advised to change these options unless you have very good reason for doing so.
        /// Larger values will almost certainly have undesirable consequences.
        /// 
        /// The default value is is 8.
        abstract touchTapThreshold: float option with get, set
        /// A nonnegative integer that indicates the maximum allowable distance that a user may move during a tap gesture,
        /// on touch devices and desktop devices respectively.
        /// 
        /// This makes tapping easier for users.
        /// These values have sane defaults,
        /// so it is not advised to change these options unless you have very good reason for doing so.
        /// Larger values will almost certainly have undesirable consequences.
        /// 
        /// The default value is 4.
        abstract desktopTapThreshold: float option with get, set
        /// Whether nodes should be locked (not draggable at all) by default (if true, overrides individual node state).
        /// 
        /// The default value is false.
        abstract autolock: bool option with get, set
        /// Whether nodes should be ungrabified (not grabbable by user) by default (if true, overrides individual node state).
        /// 
        /// The default value is false.
        abstract autoungrabify: bool option with get, set
        /// Whether nodes should be unselectified (immutable selection state) by default (if true, overrides individual element state).
        /// 
        /// The default value is false.
        abstract autounselectify: bool option with get, set
        /// A convenience option that initialises the Core to run headlessly.
        /// You do not need to set this in environments that are implicitly headless (e.g. Node.js).
        /// However, it is handy to set headless: true if you want a headless Core in a browser.
        /// 
        /// The default value is false.
        abstract headless: bool option with get, set
        /// A boolean that indicates whether styling should be used.
        /// For headless (i.e. outside the browser) environments,
        /// display is not necessary and so neither is styling necessary — thereby speeding up your code.
        /// You can manually enable styling in headless environments if you require it for a special case.
        /// Note that it does not make sense to disable style if you plan on rendering the graph.
        /// 
        /// The default value is true.
        abstract styleEnabled: bool option with get, set
        /// When set to true, the renderer does not render edges while the viewport is being manipulated.
        /// This makes panning, zooming, dragging, et cetera more responsive for large graphs.
        /// 
        /// The default value is false.
        abstract hideEdgesOnViewport: bool option with get, set
        /// when set to true, the renderer does not render labels while the viewport is being manipulated.
        /// This makes panning, zooming, dragging, et cetera more responsive for large graphs.
        /// 
        /// The default value is false.
        abstract hideLabelsOnViewport: bool option with get, set
        /// When set to true, the renderer uses a texture (if supported) during panning and zooming instead of drawing the elements,
        /// making large graphs more responsive.
        /// 
        /// The default value is false.
        abstract textureOnViewport: bool option with get, set
        /// When set to true, the renderer will use a motion blur effect to make the transition between frames seem smoother.
        /// This can significantly increase the perceived performance for a large graphs.
        /// 
        /// The default value is false.
        abstract motionBlur: bool option with get, set
        /// When motionBlur: true, this value controls the opacity of motion blur frames.
        /// Higher values make the motion blur effect more pronounced.
        /// 
        /// The default value is 0.2.
        abstract motionBlurOpacity: float option with get, set
        /// Changes the scroll wheel sensitivity when zooming. This is a multiplicative modifier.
        /// So, a value between 0 and 1 reduces the sensitivity (zooms slower), and a value greater than 1 increases the sensitivity (zooms faster).
        /// 
        /// The default value is 1.
        abstract wheelSensitivity: float option with get, set
        /// Overrides the screen pixel ratio with a manually set value (1.0 or 0.666 recommended, if set).
        /// This can be used to increase performance on high density displays by reducing the effective area that needs to be rendered.
        /// If you want to use the hardware's actual pixel ratio at the expense of performance, you can set pixelRatio: 'auto'.
        /// 
        /// The default value is 1.
        abstract pixelRatio: U2<float, string> option with get, set

    /// cy   --> Cy.Core
    ///   The core object is your interface to a graph.
    /// 
    /// It is your entry point to Cytoscape.js:
    /// All of the library’s features are accessed through this object.
    /// http://js.cytoscape.org/#core
    type [<AllowNullLiteral>] Core =
        inherit CoreGraphManipulation
        inherit CoreGraphManipulationExt
        inherit CoreEvents
        inherit CoreViewportManipulation
        inherit CoreAnimation
        inherit CoreLayout
        inherit CoreStyle
        inherit CoreExport

    /// These are the principle functions used to interact with the graph model.
    /// 
    /// http://js.cytoscape.org/#core/graph-manipulation
    type [<AllowNullLiteral>] CoreGraphManipulation =
        /// Add elements to the graph and return them.
        abstract add: eles: U3<ElementDefinition, ResizeArray<ElementDefinition>, CollectionArgument> -> CollectionReturnValue
        /// Remove elements in collecion or match the selector from the graph and return them.
        abstract remove: eles: U2<CollectionArgument, Selector> -> CollectionReturnValue
        /// Get a collection from elements in the graph matching the specified selector or from an array of elements.
        /// If no parameter specified, an empty collection will be returned
        abstract collection: ?eles: U2<Selector, ResizeArray<CollectionArgument>> -> CollectionReturnValue
        /// Get an element from its ID in a very performant way.
        /// http://js.cytoscape.org/#cy.getElementById
        abstract getElementById: id: string -> CollectionReturnValue
        /// Get an element from its ID in a very performant way.
        /// http://js.cytoscape.org/#cy.getElementById
        abstract ``$id``: id: string -> CollectionReturnValue
        /// Get elements in the graph matching the specified selector.
        /// http://js.cytoscape.org/#cy.$
        abstract ``$``: selector: Selector -> CollectionReturnValue
        /// Get elements in the graph matching the specified selector.
        /// http://js.cytoscape.org/#cy.$
        abstract elements: ?selector: Selector -> CollectionReturnValue
        /// Get nodes in the graph matching the specified selector.
        abstract nodes: ?selector: Selector -> NodeCollection
        /// Get edges in the graph matching the specified selector.
        abstract edges: ?selector: Selector -> EdgeCollection
        /// Get elements in the graph matching the specified selector or filter function.
        abstract filter: selector: U2<Selector, (Singular -> float -> CollectionArgument -> bool)> -> CollectionReturnValue
        /// Allow for manipulation of elements without triggering multiple style calculations or multiple redraws.
        /// http://js.cytoscape.org/#cy.batch
        ///   A callback within which you can make batch updates to elements.
        abstract batch: callback: (unit -> unit) -> unit
        /// Allow for manipulation of elements without triggering multiple style calculations or multiple redraws.
        /// http://js.cytoscape.org/#cy.batch
        /// 
        /// Starts batching manually (useful for asynchronous cases).
        abstract startBatch: unit -> unit
        /// Allow for manipulation of elements without triggering multiple style calculations or multiple redraws.
        /// http://js.cytoscape.org/#cy.batch
        /// 
        /// Ends batching manually (useful for asynchronous cases).
        abstract endBatch: unit -> unit
        /// Attaches the instance to the specified container for visualisation.
        /// http://js.cytoscape.org/#cy.mount
        /// 
        /// If the core instance is headless prior to calling cy.mount(), then
        /// the instance will no longer be headless and the visualisation will
        /// be shown in the specified container. If the core instance is
        /// non-headless prior to calling cy.mount(), then the visualisation
        /// is swapped from the prior container to the specified container.
        abstract mount: element: Element -> unit
        /// Remove the instance from its current container.
        /// http://js.cytoscape.org/#cy.unmount
        /// 
        /// This function sets the instance to be headless after unmounting from
        /// the current container.
        abstract unmount: unit -> unit
        /// A convenience function to explicitly destroy the Core.
        /// http://js.cytoscape.org/#cy.destroy
        abstract destroy: unit -> unit

    /// http://js.cytoscape.org/#core/graph-manipulation
    /// http://js.cytoscape.org/#extensions
    /// These functions are intended for use in extensions.
    type [<AllowNullLiteral>] CoreGraphManipulationExt =
        /// <summary>Set the scratchpad at a particular namespace,
        /// where temporary or non-JSON data can be stored.
        /// App-level scratchpad data should use namespaces prefixed with underscore, like '_foo'.
        /// 
        /// If no parameter provided, the entire scratchpad will be returned.
        /// If only namespace provided, the scratchpad with the namespace will be returned.</summary>
        /// <param name="namespace">A namespace string.</param>
        abstract scratch: ?``namespace``: string -> Scratchpad
        abstract scratch: ``namespace``: string * value: obj option -> CoreGraphManipulationExt
        /// <summary>Remove scratchpad data. You should remove scratchpad data only at your own namespaces.
        /// http://js.cytoscape.org/#cy.removeScratch</summary>
        /// <param name="namespace">A namespace string.</param>
        abstract removeScratch: ``namespace``: string -> CoreGraphManipulationExt

    /// The principle events from the graph model.
    ///   http://js.cytoscape.org/#core/events
    type [<AllowNullLiteral>] CoreEvents =
        /// <summary>Bind to events that occur in the graph.</summary>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="handler">The handler function that is called when one of the specified events occurs.</param>
        abstract on: events: EventNames * handler: EventHandler -> CoreEvents
        abstract on: events: EventNames * selector: Selector * handler: EventHandler -> CoreEvents
        abstract on: events: EventNames * selector: Selector * data: obj option * handler: EventHandler -> CoreEvents
        abstract on: eventsMap: CoreEventsOnEventsMap * ?selector: Selector * ?data: obj -> CoreEvents
        abstract bind: events: EventNames * handler: EventHandler -> CoreEvents
        abstract bind: events: EventNames * selector: Selector * handler: EventHandler -> CoreEvents
        abstract bind: events: EventNames * selector: Selector * data: obj option * handler: EventHandler -> CoreEvents
        abstract bind: eventsMap: CoreEventsBindEventsMap * ?selector: Selector * ?data: obj -> CoreEvents
        abstract listen: events: EventNames * handler: EventHandler -> CoreEvents
        abstract listen: events: EventNames * selector: Selector * handler: EventHandler -> CoreEvents
        abstract listen: events: EventNames * selector: Selector * data: obj option * handler: EventHandler -> CoreEvents
        abstract listen: eventsMap: CoreEventsListenEventsMap * ?selector: Selector * ?data: obj -> CoreEvents
        abstract addListener: events: EventNames * handler: EventHandler -> CoreEvents
        abstract addListener: events: EventNames * selector: Selector * handler: EventHandler -> CoreEvents
        abstract addListener: events: EventNames * selector: Selector * data: obj option * handler: EventHandler -> CoreEvents
        abstract addListener: eventsMap: CoreEventsAddListenerEventsMap * ?selector: Selector * ?data: obj -> CoreEvents
        /// <summary>Get a promise that is resolved with the first
        /// of any of the specified events triggered on the graph.</summary>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="selector">[optional] A selector to specify elements for which the handler is triggered.</param>
        abstract promiseOn: events: EventNames * ?selector: Selector -> Promise<EventHandler>
        abstract pon: events: EventNames * ?selector: Selector -> Promise<EventHandler>
        /// <summary>Bind to events that occur in the graph, and trigger the handler only once.</summary>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="handler">The handler function that is called when one of the specified events occurs.</param>
        abstract one: events: EventNames * handler: EventHandler -> CoreEvents
        /// <summary>Bind to events that occur in the graph, and trigger the handler only once.</summary>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="selector">A selector to specify elements for which the handler is triggered.</param>
        /// <param name="handler">The handler function that is called when one of the specified events occurs.</param>
        abstract one: events: EventNames * selector: Selector * handler: EventHandler -> CoreEvents
        /// <summary>Bind to events that occur in the graph, and trigger the handler only once.</summary>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="selector">A selector to specify elements for which the handler is triggered.</param>
        /// <param name="data">A plain object which is passed to the handler in the event object argument.</param>
        /// <param name="handler">The handler function that is called when one of the specified events occurs.</param>
        abstract one: events: EventNames * selector: Selector * data: obj option * handler: EventHandler -> CoreEvents
        /// <summary>Bind to events that occur in the graph, and trigger the handler only once.</summary>
        /// <param name="eventsMap">A map of event names to handler functions.</param>
        /// <param name="selector">A selector to specify elements for which the handler is triggered.</param>
        /// <param name="data">A plain object which is passed to the handler in the event object argument.</param>
        abstract one: eventsMap: CoreEventsOneEventsMap * ?selector: Selector * ?data: obj -> CoreEvents
        /// <summary>Remove event handlers.
        ///   http://js.cytoscape.org/#cy.off</summary>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="selector">[optional] The same selector used to bind to the events.</param>
        /// <param name="handler">[optional] A reference to the handler function to remove.</param>
        abstract off: events: EventNames * ?selector: Selector * ?handler: EventHandler -> CoreEvents
        abstract off: eventsMap: CoreEventsOffEventsMap * ?selector: Selector -> CoreEvents
        abstract unbind: events: EventNames * ?selector: Selector * ?handler: EventHandler -> CoreEvents
        abstract unbind: eventsMap: CoreEventsUnbindEventsMap * ?selector: Selector -> CoreEvents
        abstract unlisten: events: EventNames * ?selector: Selector * ?handler: EventHandler -> CoreEvents
        abstract unlisten: eventsMap: CoreEventsUnlistenEventsMap * ?selector: Selector -> CoreEvents
        abstract removeListener: events: EventNames * ?selector: Selector * ?handler: EventHandler -> CoreEvents
        abstract removeListener: eventsMap: CoreEventsRemoveListenerEventsMap * ?selector: Selector -> CoreEvents
        /// <summary>Trigger one or more events.</summary>
        /// <param name="events">A space separated list of event names to trigger.</param>
        /// <param name="extraParams">[optional] An array of additional parameters to pass to the handler.</param>
        abstract trigger: events: EventNames * ?extraParams: ResizeArray<obj option> -> CoreEvents
        abstract emit: events: EventNames * ?extraParams: ResizeArray<obj option> -> CoreEvents
        /// <summary>Run a callback as soon as the graph becomes ready. If the graph is already ready, then the callback is called immediately.</summary>
        /// <param name="fn">The callback run as soon as the graph is ready, inside which this refers to the core (cy).</param>
        abstract ready: fn: EventHandler -> CoreEvents

    type [<AllowNullLiteral>] CoreEventsOnEventsMap =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: value: string -> EventHandler with get, set

    type [<AllowNullLiteral>] CoreEventsBindEventsMap =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: value: string -> EventHandler with get, set

    type [<AllowNullLiteral>] CoreEventsListenEventsMap =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: value: string -> EventHandler with get, set

    type [<AllowNullLiteral>] CoreEventsAddListenerEventsMap =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: value: string -> EventHandler with get, set

    type [<AllowNullLiteral>] CoreEventsOneEventsMap =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: value: string -> EventHandler with get, set

    type [<AllowNullLiteral>] CoreEventsOffEventsMap =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: value: string -> EventHandler with get, set

    type [<AllowNullLiteral>] CoreEventsUnbindEventsMap =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: value: string -> EventHandler with get, set

    type [<AllowNullLiteral>] CoreEventsUnlistenEventsMap =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: value: string -> EventHandler with get, set

    type [<AllowNullLiteral>] CoreEventsRemoveListenerEventsMap =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: value: string -> EventHandler with get, set

    type [<AllowNullLiteral>] ZoomOptionsModel =
        /// The position about which to zoom. 
        abstract position: Position with get, set

    type [<AllowNullLiteral>] ZoomOptionsRendered =
        /// The rendered position about which to zoom. 
        abstract renderedPosition: Position with get, set

    type [<AllowNullLiteral>] ZoomOptionsLevel =
        /// The zoom level to set. 
        abstract level: float with get, set

    type [<AllowNullLiteral>] ZoomOptions =
        interface end

    /// http://js.cytoscape.org/#core/viewport-manipulation
    type [<AllowNullLiteral>] CoreViewportManipulation =
        /// Get the HTML DOM element in which the graph is visualised.
        /// A null value is returned if the Core is headless.
        abstract container: unit -> Element option
        /// <summary>Pan the graph to the centre of a collection.</summary>
        /// <param name="eles">The collection to centre upon.</param>
        abstract center: ?eles: CollectionArgument -> CoreViewportManipulation
        /// <summary>Pan the graph to the centre of a collection.</summary>
        /// <param name="eles">The collection to centre upon.</param>
        abstract centre: ?eles: CollectionArgument -> CoreViewportManipulation
        /// <summary>Pan and zooms the graph to fit to a collection.
        /// http://js.cytoscape.org/#cy.fit</summary>
        /// <param name="eles">[optional] The collection to fit to.</param>
        /// <param name="padding">[optional] An amount of padding (in pixels) to have around the graph</param>
        abstract fit: ?eles: CollectionArgument * ?padding: float -> CoreViewportManipulation
        /// Reset the graph to the default zoom level and panning position.
        /// http://js.cytoscape.org/#cy.reset
        abstract reset: unit -> CoreViewportManipulation
        /// Get the panning position of the graph.
        /// http://js.cytoscape.org/#cy.pan
        abstract pan: unit -> Position
        /// <summary>Set the panning position of the graph.
        /// http://js.cytoscape.org/#cy.pan</summary>
        /// <param name="renderedPosition">The rendered position to pan the graph to.</param>
        abstract pan: ?renderedPosition: Position -> CoreViewportManipulation
        /// <summary>Relatively pan the graph by a specified rendered position vector.
        /// http://js.cytoscape.org/#cy.panBy</summary>
        /// <param name="renderedPosition">The rendered position vector to pan the graph by.</param>
        abstract panBy: renderedPosition: Position -> CoreViewportManipulation
        /// Get whether panning is enabled.
        /// If cy.boxSelectionEnabled() === true, then the user
        /// must taphold to initiate panning.
        /// http://js.cytoscape.org/#cy.panningEnabled
        abstract panningEnabled: unit -> bool
        /// <summary>Set whether panning is enabled. If cy.boxSelectionEnabled() === true, then the user must taphold to initiate panning.
        /// http://js.cytoscape.org/#cy.panningEnabled</summary>
        /// <param name="bool">A truthy value enables panning; a falsey value disables it.</param>
        abstract panningEnabled: bool: bool -> CoreViewportManipulation
        /// Get whether panning by user events (e.g. dragging the graph background) is enabled. If cy.boxSelectionEnabled() === true, then the user must taphold to initiate panning.
        /// http://js.cytoscape.org/#cy.userPanningEnabled
        abstract userPanningEnabled: unit -> bool
        /// <summary>Set whether panning by user events (e.g. dragging the graph background) is enabled. If cy.boxSelectionEnabled() === true, then the user must taphold to initiate panning.
        /// http://js.cytoscape.org/#cy.userPanningEnabled</summary>
        /// <param name="bool">A truthy value enables user panning; a falsey value disables it.</param>
        abstract userPanningEnabled: bool: bool -> CoreViewportManipulation
        /// Get the zoom level.
        /// http://js.cytoscape.org/#cy.zoom
        abstract zoom: unit -> float
        /// <summary>Set the zoom level.
        /// http://js.cytoscape.org/#cy.zoom</summary>
        /// <param name="level">The zoom level to set.</param>
        abstract zoom: ?level: U2<float, ZoomOptions> -> CoreViewportManipulation
        /// <summary>Set or get whether zooming is enabled. Get if no parameter provided.
        /// http://js.cytoscape.org/#cy.zoomingEnabled</summary>
        /// <param name="bool">A truthy value enables zooming; a falsey value disables it.</param>
        abstract zoomingEnabled: ?bool: bool -> CoreViewportManipulation
        /// Get whether zooming by user events (e.g. mouse wheel, pinch-to-zoom)
        /// is enabled.
        /// http://js.cytoscape.org/#cy.userZoomingEnabled
        abstract userZoomingEnabled: unit -> bool
        /// <summary>Get or set whether zooming by user events get if no parameter provided
        /// (e.g. mouse wheel, pinch-to-zoom) is enabled.
        /// http://js.cytoscape.org/#cy.userZoomingEnabled</summary>
        /// <param name="bool">A truthy value enables user zooming; a falsey value disables it.</param>
        abstract userZoomingEnabled: ?bool: bool -> CoreViewportManipulation
        /// Get the minimum zoom level.
        /// http://js.cytoscape.org/#cy.minZoom
        abstract minZoom: unit -> float
        /// <summary>Set the minimum zoom level.
        /// http://js.cytoscape.org/#cy.minZoom</summary>
        /// <param name="zoom">The new minimum zoom level to use.</param>
        abstract minZoom: zoom: float -> CoreViewportManipulation
        /// Get the maximum zoom level.
        /// http://js.cytoscape.org/#cy.maxZoom
        abstract maxZoom: unit -> float
        /// <summary>Set the maximum zoom level.
        /// http://js.cytoscape.org/#cy.maxZoom</summary>
        /// <param name="zoom">The new maximum zoom level to use.</param>
        abstract maxZoom: zoom: float -> CoreViewportManipulation
        /// <summary>Set the viewport state (pan & zoom) in one call.
        /// http://js.cytoscape.org/#cy.viewport</summary>
        /// <param name="zoom">The zoom level to set.</param>
        /// <param name="pan">The pan to set (a rendered position).</param>
        abstract viewport: zoom: float * pan: Position -> CoreViewportManipulation
        /// Get whether box selection is enabled.
        /// If enabled, the user must hold left-click to initiate panning.
        /// http://js.cytoscape.org/#cy.boxSelectionEnabled
        abstract boxSelectionEnabled: unit -> bool
        /// <summary>Set whether box selection is enabled.
        /// If enabled, the user must hold left-click to initiate panning.
        /// http://js.cytoscape.org/#cy.boxSelectionEnabled</summary>
        /// <param name="bool">A truthy value enables box selection; a falsey value disables it.</param>
        abstract boxSelectionEnabled: bool: bool -> CoreViewportManipulation
        /// Get the on-screen width of the viewport in pixels.
        /// http://js.cytoscape.org/#cy.width
        abstract width: unit -> float
        /// Get the on-screen height of the viewport in pixels.
        /// http://js.cytoscape.org/#cy.height
        abstract height: unit -> float
        /// Get the extent of the viewport, a bounding box in model
        /// coordinates that lets you know what model
        /// positions are visible in the viewport.
        /// http://js.cytoscape.org/#cy.extent
        abstract extent: unit -> CoreViewportManipulationExtentReturn
        /// Get whether nodes are automatically locked
        /// (i.e. if true, nodes are locked despite their individual state).
        /// http://js.cytoscape.org/#cy.autolock
        abstract autolock: unit -> bool
        /// <summary>Set whether nodes are automatically locked
        /// (i.e. if true, nodes are locked despite their individual state).
        /// http://js.cytoscape.org/#cy.autolock</summary>
        /// <param name="bool">A truthy value enables autolocking; a falsey value disables it.</param>
        abstract autolock: bool: bool -> CoreViewportManipulation
        /// Get whether nodes are automatically ungrabified
        /// (i.e. if true, nodes are ungrabbale despite their individual state).
        /// http://js.cytoscape.org/#cy.autoungrabify
        abstract autoungrabify: unit -> bool
        /// <summary>Set whether nodes are automatically ungrabified
        /// (i.e. if true, nodes are ungrabbale despite their individual state).
        /// http://js.cytoscape.org/#cy.autoungrabify</summary>
        /// <param name="bool">A truthy value enables autolocking; a falsey value disables it.</param>
        abstract autoungrabify: bool: bool -> CoreViewportManipulation
        /// Get whether nodes are automatically unselectified
        /// (i.e. if true, nodes are unselectable despite their individual state).
        /// http://js.cytoscape.org/#cy.autounselectify
        abstract autounselectify: unit -> bool
        /// <summary>Set whether nodes are automatically unselectified
        /// (i.e. if true, nodes are unselectable despite their individual state).
        /// http://js.cytoscape.org/#cy.autounselectify</summary>
        /// <param name="bool">A truthy value enables autolocking; a falsey value disables it.</param>
        abstract autounselectify: bool: bool -> CoreViewportManipulation
        /// Force the renderer to redraw (i.e. draw a new frame).
        /// 
        /// This function forces the renderer to draw a new frame.
        /// It is useful for very specific edgecases, such as in certain UI plugins,
        /// but it should not be needed for most developers.
        /// http://js.cytoscape.org/#cy.forceRender
        abstract forceRender: unit -> CoreViewportManipulation
        /// Force the renderer to recalculate the viewport bounds.
        /// 
        /// If your code resizes the graph's dimensions or position
        /// (i.e. by changing the style of the HTML DOM element that holds the graph),
        /// you will want to call cy.resize() to have the graph resize and redraw itself.
        /// 
        /// Cytoscape.js can not automatically monitor the bounding box of the viewport,
        /// as querying the DOM for those dimensions can be expensive.
        /// Although cy.resize() is automatically called for you on the window's resize event,
        /// there is no resize or style event for arbitrary DOM elements.
        /// http://js.cytoscape.org/#cy.resize
        abstract resize: unit -> CoreViewportManipulation
        abstract invalidateDimensions: unit -> CoreViewportManipulation

    type [<AllowNullLiteral>] CoreViewportManipulationExtentReturn =
        abstract x1: float with get, set
        abstract y1: float with get, set
        abstract x2: float with get, set
        abstract y2: float with get, set
        abstract w: float with get, set
        abstract h: float with get, set

    /// http://js.cytoscape.org/#core/animation
    type [<AllowNullLiteral>] AnimationFitOptions =
        abstract eles: U2<CollectionArgument, Selector> with get, set
        abstract padding: float with get, set

    type [<AllowNullLiteral>] CenterOptions =
        abstract eles: U2<CollectionArgument, Selector> with get, set

    type [<AllowNullLiteral>] AnimationOptions =
        /// A zoom level to which the graph will be animated. 
        abstract zoom: ZoomOptions option with get, set
        /// A panning position to which the graph will be animated. 
        abstract pan: Position option with get, set
        /// A relative panning position to which the graph will be animated. 
        abstract panBy: Position option with get, set
        /// An object containing fitting options from which the graph will be animated. 
        abstract fit: AnimationFitOptions option with get, set
        /// An object containing centring options from which the graph will be animated. 
        abstract center: CenterOptions option with get, set
        /// easing - A transition-timing-function easing style string that shapes the animation progress curve. 
        abstract easing: Css.TransitionTimingFunction option with get, set
        /// duration - The duration of the animation in milliseconds. 
        abstract duration: float option with get, set

    type [<AllowNullLiteral>] AnimateOptions =
        inherit AnimationOptions
        /// queue - A boolean indicating whether to queue the animation. 
        abstract queue: bool option with get, set
        /// complete - A function to call when the animation is done. 
        abstract complete: unit -> unit
        /// step - A function to call each time the animation steps. 
        abstract step: unit -> unit

    type [<AllowNullLiteral>] CoreAnimation =
        /// Get whether the viewport is currently being animated.
        /// http://js.cytoscape.org/#cy.animated
        abstract animated: unit -> bool
        /// <summary>Animate the viewport.
        /// http://js.cytoscape.org/#cy.animate</summary>
        /// <param name="anis">An object containing the details of the animation.</param>
        /// <param name="options">An object containing animation options.</param>
        abstract animate: anis: AnimateOptions * ?options: AnimateOptions -> Core
        /// Get an animation of the viewport.
        /// http://js.cytoscape.org/#cy.animation
        abstract animation: options: AnimationOptions -> AnimationManipulation
        /// <summary>Add a delay between animations for the viewport.</summary>
        /// <param name="duration">How long the delay should be in milliseconds.</param>
        /// <param name="complete">A function to call when the delay is complete.</param>
        abstract delay: duration: float * ?complete: (unit -> unit) -> Core
        /// Get a delay animation of the viewport.
        /// http://js.cytoscape.org/#cy.delayAnimation
        abstract delayAnimation: duration: float -> AnimationManipulation
        /// <summary>Stop all viewport animations that are currently running.
        /// http://js.cytoscape.org/#cy.stop</summary>
        /// <param name="clearQueue">A boolean, indicating whether the queue of animations should be emptied.</param>
        /// <param name="jumpToEnd">A boolean, indicating whether the currently-running animations should jump to their ends rather than just stopping midway.</param>
        abstract stop: ?clearQueue: bool * ?jumpToEnd: bool -> Core
        /// Remove all queued animations for the viewport.
        /// http://js.cytoscape.org/#cy.clearQueue
        abstract clearQueue: unit -> Core

    /// http://js.cytoscape.org/#core/layout
    type [<AllowNullLiteral>] CoreLayout =
        /// Run a layout, which algorithmically positions the nodes in the graph.
        /// For layouts included with Cytoscape.js, you can find their
        /// options documented in the Layouts section.
        /// For external layouts, please refer to their accompanying documentation.
        /// 
        /// An analogue to run a layout on a subset of the graph exists as eles.layout().
        /// http://js.cytoscape.org/#cy.layout
        abstract layout: layout: LayoutOptions -> Layouts
        /// Get a new layout, which can be used to algorithmically
        /// position the nodes in the graph.
        /// 
        /// You must specify options.name with the name of the layout you wish to use.
        /// 
        /// This function creates and returns a layout object.
        /// You may want to keep a reference to the layout for more advanced usecases,
        /// such as running multiple layouts simultaneously.
        /// Note that you must call layout.run() in order for it to affect the graph.
        /// An analogue to make a layout on a subset of the graph exists as eles.makeLayout().
        abstract makeLayout: options: LayoutOptions -> Layouts
        abstract createLayout: options: LayoutOptions -> Layouts

    /// Get the entry point to modify the visual style of the graph after initialisation.
    /// http://js.cytoscape.org/#core/style
    type [<AllowNullLiteral>] ElementStylesheetStyle =
        inherit StylesheetStyle
        abstract json: unit -> obj option

    type [<AllowNullLiteral>] ElementStylesheetCSS =
        inherit StylesheetCSS
        abstract json: unit -> obj option

    type [<AllowNullLiteral>] CoreStyle =
        /// Get the current style object.
        abstract style: unit -> U2<ElementStylesheetStyle, ElementStylesheetCSS>
        /// Assign a new stylesheet to replace the existing one.
        abstract style: sheet: U3<Stylesheet, ResizeArray<Stylesheet>, string> -> Stylesheet

    type Stylesheet =
        U2<StylesheetStyle, StylesheetCSS>

    [<RequireQualifiedAccess; CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]
    module Stylesheet =
        let ofStylesheetStyle v: Stylesheet = v |> U2.Case1
        let isStylesheetStyle (v: Stylesheet) = match v with U2.Case1 _ -> true | _ -> false
        let asStylesheetStyle (v: Stylesheet) = match v with U2.Case1 o -> Some o | _ -> None
        let ofStylesheetCSS v: Stylesheet = v |> U2.Case2
        let isStylesheetCSS (v: Stylesheet) = match v with U2.Case2 _ -> true | _ -> false
        let asStylesheetCSS (v: Stylesheet) = match v with U2.Case2 o -> Some o | _ -> None

    type [<AllowNullLiteral>] StylesheetStyle =
        abstract selector: string with get, set
        abstract style: U2<Css.Node, Css.Edge> with get, set

    /// http://js.cytoscape.org/#cy.style
    type [<AllowNullLiteral>] StylesheetCSS =
        abstract selector: string with get, set
        abstract css: U2<Css.Node, Css.Edge> with get, set

    /// http://js.cytoscape.org/#core/export
    type [<AllowNullLiteral>] ExportOptions =
        /// The background colour of the image (transparent by default).
        abstract bg: string option with get, set
        /// Whether to export the current viewport view (false, default) or the entire graph (true).
        abstract full: bool option with get, set
        /// This value specifies a positive number that scales the size of the resultant image.
        abstract scale: float option with get, set
        /// Specifies the scale automatically in combination with maxHeight such that the resultant image is no wider than maxWidth.
        abstract maxWidth: float option with get, set
        /// Specifies the scale automatically in combination with maxWidth such that the resultant image is no taller than maxHeight.
        abstract maxHeight: float option with get, set

    type [<AllowNullLiteral>] ExportStringOptions =
        inherit ExportOptions
        /// output Whether the output should be 'base64uri' (default), 'base64', or 'blob'.
        abstract output: U2<string, string> option with get, set

    type [<AllowNullLiteral>] ExportBlobOptions =
        inherit ExportOptions
        /// output Whether the output should be 'base64uri' (default), 'base64', or 'blob'.
        abstract output: string option with get, set

    type [<AllowNullLiteral>] ExportJpgOptions =
        inherit ExportOptions
        /// quality Specifies the quality of the image from 0
        /// (low quality, low filesize) to 1 (high quality, high filesize).
        /// If not set, the browser's default quality value is used.
        abstract quality: float option with get, set

    type [<AllowNullLiteral>] ExportJpgStringOptions =
        inherit ExportJpgOptions
        inherit ExportStringOptions

    type [<AllowNullLiteral>] ExportJpgBlobOptions =
        inherit ExportJpgOptions
        inherit ExportBlobOptions

    type [<AllowNullLiteral>] CoreExport =
        /// Export the current graph view as a PNG image in Base64 representation.
        abstract png: ?options: ExportStringOptions -> string
        abstract png: ?options: ExportBlobOptions -> Blob
        /// Export the current graph view as a JPG image in Base64 representation.
        abstract jpg: ?options: ExportJpgStringOptions -> string
        abstract jpg: ?options: ExportJpgBlobOptions -> Blob
        /// Export the current graph view as a JPG image in Base64 representation.
        abstract jpeg: ?options: ExportJpgStringOptions -> string
        abstract jpeg: ?options: ExportJpgBlobOptions -> Blob
        /// Export the graph as JSON, the same format used at initialisation.
        abstract json: unit -> obj
        abstract json: json: obj -> CoreExport

    type Collection<'TIn> =
        Collection<obj, 'TIn>

    type Collection =
        Collection<obj, obj>

    /// eles --> Cy.Collection
    ///   a collection of one or more elements (nodes and edges)
    /// 
    /// The input can be any element (node and edge) collection.
    /// http://js.cytoscape.org/#collection
    type [<AllowNullLiteral>] Collection<'TOut, 'TIn> =
        inherit CollectionGraphManipulation
        inherit CollectionEvents
        inherit CollectionData
        inherit CollectionPosition
        inherit CollectionTraversing
        inherit CollectionLayout
        inherit CollectionSelection
        inherit CollectionStyle
        inherit CollectionAnimation
        inherit CollectionComparision
        inherit CollectionIteration<'TIn, 'TOut>
        inherit CollectionBuildingFiltering<'TIn, 'TOut>
        inherit CollectionAlgorithms

    type Singular<'TIn> =
        Singular<obj, 'TIn>

    type Singular =
        Singular<obj, obj>

    /// ele  --> Cy.Singular
    /// a collection of a single element (node or edge)
    /// NB: every singular collection is a general collection too (but not vice versa)!
    type [<AllowNullLiteral>] Singular<'TOut, 'TIn> =
        inherit Collection<'TOut, 'TIn>
        inherit SingularGraphManipulation
        inherit SingularData
        inherit SingularPosition
        inherit SingularSelection
        inherit SingularStyle
        inherit SingularAnimation

    type [<AllowNullLiteral>] ElementsDefinition =
        abstract nodes: ResizeArray<NodeDefinition> with get, set
        abstract edges: ResizeArray<EdgeDefinition> with get, set

    type [<AllowNullLiteral>] EventHandler =
        [<Emit "$0($1...)">] abstract Invoke: ``event``: EventObject -> unit

    type CollectionArgument =
        U4<Collection, EdgeCollection, NodeCollection, SingularElementArgument>

    [<RequireQualifiedAccess; CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]
    module CollectionArgument =
        let ofCollection v: CollectionArgument = v |> U4.Case1
        let isCollection (v: CollectionArgument) = match v with U4.Case1 _ -> true | _ -> false
        let asCollection (v: CollectionArgument) = match v with U4.Case1 o -> Some o | _ -> None
        let ofEdgeCollection v: CollectionArgument = v |> U4.Case2
        let isEdgeCollection (v: CollectionArgument) = match v with U4.Case2 _ -> true | _ -> false
        let asEdgeCollection (v: CollectionArgument) = match v with U4.Case2 o -> Some o | _ -> None
        let ofNodeCollection v: CollectionArgument = v |> U4.Case3
        let isNodeCollection (v: CollectionArgument) = match v with U4.Case3 _ -> true | _ -> false
        let asNodeCollection (v: CollectionArgument) = match v with U4.Case3 o -> Some o | _ -> None
        let ofSingularElementArgument v: CollectionArgument = v |> U4.Case4
        let isSingularElementArgument (v: CollectionArgument) = match v with U4.Case4 _ -> true | _ -> false
        let asSingularElementArgument (v: CollectionArgument) = match v with U4.Case4 o -> Some o | _ -> None

    type [<AllowNullLiteral>] CollectionReturnValue =
        interface end

    /// edges -> Cy.EdgeCollection
    ///   a collection of one or more edges
    /// 
    /// The output is a collection of edge elements OR single edge.
    type [<AllowNullLiteral>] EdgeCollection =
        inherit Collection<EdgeSingular, EdgeSingular>
        inherit EdgeCollectionTraversing

    /// nodes -> Cy.NodeCollection
    /// a collection of one or more nodes
    /// 
    /// The output is a collection of node elements OR single node.
    type [<AllowNullLiteral>] NodeCollection =
        inherit Collection<NodeSingular, NodeSingular>
        inherit NodeCollectionMetadata
        inherit NodeCollectionPosition
        inherit NodeCollectionTraversing
        inherit NodeCollectionCompound

    type SingularElementArgument =
        U2<EdgeSingular, NodeSingular>

    [<RequireQualifiedAccess; CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]
    module SingularElementArgument =
        let ofEdgeSingular v: SingularElementArgument = v |> U2.Case1
        let isEdgeSingular (v: SingularElementArgument) = match v with U2.Case1 _ -> true | _ -> false
        let asEdgeSingular (v: SingularElementArgument) = match v with U2.Case1 o -> Some o | _ -> None
        let ofNodeSingular v: SingularElementArgument = v |> U2.Case2
        let isNodeSingular (v: SingularElementArgument) = match v with U2.Case2 _ -> true | _ -> false
        let asNodeSingular (v: SingularElementArgument) = match v with U2.Case2 o -> Some o | _ -> None

    type [<AllowNullLiteral>] SingularElementReturnValue =
        interface end

    /// edge --> Cy.EdgeSingular
    /// a collection of a single edge
    type [<AllowNullLiteral>] EdgeSingular =
        inherit Singular<EdgeSingular, EdgeSingular>
        inherit EdgeCollection
        inherit EdgeSingularData
        inherit EdgeSingularPoints
        inherit EdgeSingularTraversing

    /// node --> Cy.NodeSingular
    /// a collection of a single node
    type [<AllowNullLiteral>] NodeSingular =
        inherit Singular<NodeSingular, NodeSingular>
        inherit NodeCollection
        inherit NodeSingularMetadata
        inherit NodeSingularPosition
        inherit NodeSingularCompound

    /// http://js.cytoscape.org/#collection/graph-manipulation
    type [<AllowNullLiteral>] CollectionGraphManipulation =
        /// Remove the elements from the graph.
        /// http://js.cytoscape.org/#eles.remove
        abstract remove: unit -> CollectionReturnValue
        /// Put removed elements back into the graph.
        /// http://js.cytoscape.org/#eles.restore
        abstract restore: unit -> CollectionReturnValue
        /// Get a new collection containing clones (i.e. copies) of the elements in the calling collection.
        /// http://js.cytoscape.org/#eles.clone
        abstract clone: unit -> CollectionReturnValue
        /// Get a new collection containing clones (i.e. copies) of the elements in the calling collection.
        /// http://js.cytoscape.org/#eles.clone
        abstract copy: unit -> CollectionReturnValue
        /// Effectively move edges to different nodes. The modified (actually new) elements are returned.
        /// http://js.cytoscape.org/#eles.move
        abstract move: location: CollectionGraphManipulationMoveLocation -> EdgeCollection
        /// Effectively move nodes to different parent node. The modified (actually new) elements are returned.
        /// http://js.cytoscape.org/#eles.move
        abstract move: location: CollectionGraphManipulationMoveLocation_ -> NodeCollection

    type [<AllowNullLiteral>] CollectionGraphManipulationMoveLocation =
        abstract source: string option with get, set
        abstract target: string option with get, set

    type [<AllowNullLiteral>] CollectionGraphManipulationMoveLocation_ =
        abstract parent: string with get, set

    /// http://js.cytoscape.org/#collection/graph-manipulation
    type [<AllowNullLiteral>] SingularGraphManipulation =
        /// Get the core instance that owns the element.
        abstract cy: unit -> Core
        /// Get whether the element has been removed from the graph.
        /// http://js.cytoscape.org/#ele.removed
        abstract removed: unit -> bool
        /// Get whether the element is inside the graph (i.e. not removed).
        /// http://js.cytoscape.org/#ele.inside
        abstract inside: unit -> bool

    /// http://js.cytoscape.org/#collection/events
    type [<AllowNullLiteral>] CollectionEvents =
        /// http://js.cytoscape.org/#eles.on
        abstract on: events: EventNames * selector: string * data: obj option * handler: EventHandler -> CollectionEvents
        abstract on: events: EventNames * selector: string * handler: EventHandler -> CollectionEvents
        abstract on: events: EventNames * handler: EventHandler -> CollectionEvents
        abstract bind: events: EventNames * selector: string * data: obj option * handler: EventHandler -> CollectionEvents
        abstract bind: events: EventNames * selector: string * handler: EventHandler -> CollectionEvents
        abstract bind: events: EventNames * handler: EventHandler -> CollectionEvents
        abstract listen: events: EventNames * selector: string * data: obj option * handler: EventHandler -> CollectionEvents
        abstract listen: events: EventNames * selector: string * handler: EventHandler -> CollectionEvents
        abstract listen: events: EventNames * handler: EventHandler -> CollectionEvents
        abstract addListener: events: EventNames * selector: string * data: obj option * handler: EventHandler -> CollectionEvents
        abstract addListener: events: EventNames * selector: string * handler: EventHandler -> CollectionEvents
        abstract addListener: events: EventNames * handler: EventHandler -> CollectionEvents
        /// http://js.cytoscape.org/#eles.promiseOn
        /// alias: pon
        abstract promiseOn: events: EventNames * ?selector: string -> Promise<EventHandler>
        abstract pon: events: EventNames * ?selector: string -> Promise<EventHandler>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="selector">[optional] A delegate selector to specify child elements for which the handler is triggered.</param>
        /// <param name="data">[optional] A plain object which is passed to the handler in the event object argument.</param>
        abstract one: events: EventNames * selector: string * data: obj option * handler: EventHandler -> CollectionEvents
        abstract one: events: EventNames * selector: string * handler: EventHandler -> CollectionEvents
        abstract one: events: EventNames * handler: EventHandler -> CollectionEvents
        /// http://js.cytoscape.org/#eles.once
        abstract once: events: EventNames * selector: string * data: obj option * handler: EventHandler -> CollectionEvents
        abstract once: events: EventNames * selector: string * handler: EventHandler -> CollectionEvents
        abstract once: events: EventNames * handler: EventHandler -> CollectionEvents
        /// http://js.cytoscape.org/#eles.off
        /// alias unbind, unlisten, removeListener
        abstract off: events: EventNames * ?selector: string * ?handler: EventHandler -> CollectionEvents
        abstract unbind: events: EventNames * ?selector: string * ?handler: EventHandler -> CollectionEvents
        abstract unlisten: events: EventNames * ?selector: string * ?handler: EventHandler -> CollectionEvents
        abstract removeListener: events: EventNames * ?selector: string * ?handler: EventHandler -> CollectionEvents
        /// http://js.cytoscape.org/#eles.trigger
        /// alias: emit
        abstract trigger: events: EventNames * ?extra: ResizeArray<string> -> CollectionEvents
        abstract emit: events: EventNames * ?extra: ResizeArray<string> -> CollectionEvents

    /// http://js.cytoscape.org/#collection/data
    /// 
    /// The following fields are immutable:
    /// id: The id field is used to uniquely identify an element in the graph.
    /// source & target : These fields define an edge's relationship to nodes, and this relationship can not be changed after creation.
    /// parent: The parent field defines the parent (compound) node.
    type [<AllowNullLiteral>] CollectionData =
        /// <summary>Remove developer-defined data associated with the elements.
        /// http://js.cytoscape.org/#eles.removeData</summary>
        /// <param name="names">A space-separated list of fields to delete.</param>
        abstract removeData: ?names: string -> CollectionReturnValue
        abstract removeAttr: ?names: string -> CollectionReturnValue
        /// Get an array of the plain JavaScript object
        /// representation of all elements in the collection.
        abstract jsons: unit -> ResizeArray<string>

    /// http://js.cytoscape.org/#collection/data
    type [<AllowNullLiteral>] SingularData =
        /// <summary>Read and write developer-defined data associated with the elements
        /// http://js.cytoscape.org/#eles.data
        /// Get a particular data field for the element.</summary>
        /// <param name="name">The name of the field to get.</param>
        abstract data: ?name: string -> obj option
        /// <summary>Set a particular data field for the element.</summary>
        /// <param name="name">The name of the field to set.</param>
        /// <param name="value">The value to set for the field.</param>
        abstract data: name: string * value: obj option -> SingularData
        /// <summary>Update multiple data fields at once via an object.</summary>
        /// <param name="obj">The object containing name- value pairs to update data fields.</param>
        abstract data: obj: obj option -> SingularData
        /// <summary>Get a particular data field for the element.</summary>
        /// <param name="name">The name of the field to get.</param>
        abstract attr: ?name: string -> obj option
        /// <summary>Set a particular data field for the element.</summary>
        /// <param name="name">The name of the field to set.</param>
        /// <param name="value">The value to set for the field.</param>
        abstract attr: name: string * value: obj option -> SingularData
        /// <summary>Update multiple data fields at once via an object.</summary>
        /// <param name="obj">The object containing name- value pairs to update data fields.</param>
        abstract attr: obj: obj option -> SingularData
        /// <summary>Get or set the scratchpad at a particular namespace,
        /// where temporary or non-JSON data can be stored.
        /// Get scratchpad if one or no parameter provided.
        /// App-level scratchpad data should use namespaces
        /// prefixed with underscore, like '_foo'.
        /// http://js.cytoscape.org/#ele.scratch</summary>
        /// <param name="namespace">A namespace string.</param>
        abstract scratch: ?``namespace``: string -> Scratchpad
        abstract scratch: ``namespace``: string * value: obj option -> SingularData
        /// <summary>Remove scratchpad data.
        /// You should remove scratchpad data only at your own namespaces.
        /// http://js.cytoscape.org/#ele.removeScratch</summary>
        /// <param name="namespace">A namespace string.</param>
        abstract removeScratch: ``namespace``: string -> SingularData
        /// A shortcut to get the ID of an element.
        /// http://js.cytoscape.org/#ele.id
        abstract id: unit -> string
        /// Get the element's plain JavaScript object representation.
        /// http://js.cytoscape.org/#ele.json
        abstract json: unit -> string
        /// Get the group string that defines the type of the element.
        /// 
        /// The group strings are 'nodes' for nodes and 'edges' for edges.
        /// In general, you should be using ele.isEdge()
        /// and ele.isNode() instead of ele.group().
        /// http://js.cytoscape.org/#ele.group
        abstract group: unit -> ElementGroup
        /// Get whether the element is a node.
        /// http://js.cytoscape.org/#ele.isNode
        abstract isNode: unit -> bool
        /// Get whether the element is an edge.
        /// http://js.cytoscape.org/#ele.isEdge
        abstract isEdge: unit -> bool

    /// http://js.cytoscape.org/#collection/data
    type [<AllowNullLiteral>] EdgeSingularData =
        /// Get whether the edge is a loop (i.e. source same as target).
        /// http://js.cytoscape.org/#edge.isLoop
        abstract isLoop: unit -> bool
        /// Get whether the edge is simple (i.e. source different than target).
        /// http://js.cytoscape.org/#edge.isSimple
        abstract isSimple: unit -> bool

    /// http://js.cytoscape.org/#collection/metadata
    type [<AllowNullLiteral>] NodeSingularMetadata =
        /// <summary>Get the degree of a node.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract degree: includeLoops: bool -> float
        /// <summary>Get the indegree of a node.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract indegree: includeLoops: bool -> float
        /// <summary>Get the outdegree of a node.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract outdegree: includeLoops: bool -> float

    /// http://js.cytoscape.org/#collection/metadata
    type [<AllowNullLiteral>] NodeCollectionMetadata =
        /// <summary>Get the total degree of a collection of nodes.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract totalDegree: includeLoops: bool -> float
        /// <summary>Get the minimum degree of the nodes in the collection.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract minDegree: includeLoops: bool -> float
        /// <summary>Get the maximum degree of the nodes in the collection.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract maxDegree: includeLoops: bool -> float
        /// <summary>Get the minimum indegree of the nodes in the collection.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract minIndegree: includeLoops: bool -> float
        /// <summary>Get the maximum indegree of the nodes in the collection.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract maxIndegree: includeLoops: bool -> float
        /// <summary>Get the minimum outdegree of the nodes in the collection.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract minOutdegree: includeLoops: bool -> float
        /// <summary>Get the maximum outdegree of the nodes in the collection.</summary>
        /// <param name="includeLoops">A boolean, indicating whether loops are to be included in degree calculations.</param>
        abstract maxOutdegree: includeLoops: bool -> float

    /// http://js.cytoscape.org/#collection/position--dimensions
    type [<AllowNullLiteral>] NodeSingularPosition =
        /// Get the (model) position of a node.
        abstract position: unit -> Position
        /// <summary>Get the value of a specified position dimension.</summary>
        /// <param name="dimension">The position dimension to set.</param>
        abstract position: dimension: PositionDimension -> float
        /// <summary>Set the value of a specified position dimension.</summary>
        /// <param name="dimension">The position dimension to set.</param>
        /// <param name="value">The value to set to the dimension.</param>
        abstract position: dimension: PositionDimension * value: float -> NodeSingularPosition
        /// <summary>Set the position using name-value pairs in the specified object.</summary>
        /// <param name="pos">An object specifying name-value pairs representing dimensions to set.</param>
        abstract position: pos: Position -> NodeSingularPosition
        /// Get the (model) position of a node.
        abstract modelPosition: unit -> Position
        /// <summary>Get the value of a specified position dimension.</summary>
        /// <param name="dimension">The position dimension to set.</param>
        abstract modelPosition: dimension: PositionDimension -> float
        /// <summary>Set the value of a specified position dimension.</summary>
        /// <param name="dimension">The position dimension to set.</param>
        /// <param name="value">The value to set to the dimension.</param>
        abstract modelPosition: dimension: PositionDimension * value: float -> NodeSingularPosition
        /// <summary>Set the position using name-value pairs in the specified object.</summary>
        /// <param name="pos">An object specifying name-value pairs representing dimensions to set.</param>
        abstract modelPosition: pos: Position -> NodeSingularPosition
        /// Get the (model) position of a node.
        abstract point: unit -> Position
        /// <summary>Get the value of a specified position dimension.</summary>
        /// <param name="dimension">The position dimension to set.</param>
        abstract point: dimension: PositionDimension -> float
        /// <summary>Set the value of a specified position dimension.</summary>
        /// <param name="dimension">The position dimension to set.</param>
        /// <param name="value">The value to set to the dimension.</param>
        abstract point: dimension: PositionDimension * value: float -> NodeSingularPosition
        /// <summary>Set the position using name-value pairs in the specified object.</summary>
        /// <param name="pos">An object specifying name-value pairs representing dimensions to set.</param>
        abstract point: pos: Position -> NodeSingularPosition
        /// <summary>Get or set the rendered (on-screen) position of a node.
        /// http://js.cytoscape.org/#node.renderedPosition
        /// Get the value of a specified rendered position dimension.</summary>
        /// <param name="dimension">The position dimension to get.</param>
        abstract renderedPosition: ?dimension: PositionDimension -> Position
        abstract renderedPosition: dimension: PositionDimension * value: Position -> NodeSingularPosition
        abstract renderedPosition: pos: NodeSingularPositionRenderedPositionPos -> NodeSingularPosition
        /// <summary>Set the value of a specified rendered position dimension.</summary>
        /// <param name="dimension">The position dimension to set.</param>
        abstract renderedPoint: ?dimension: PositionDimension -> Position
        abstract renderedPoint: dimension: PositionDimension * value: Position -> NodeSingularPosition
        abstract renderedPoint: pos: NodeSingularPositionRenderedPointPos -> NodeSingularPosition
        /// <summary>http://js.cytoscape.org/#node.relativePosition
        /// Get the value of a specified relative position dimension.</summary>
        /// <param name="dimension">The position dimension to get.</param>
        abstract relativePosition: ?dimension: PositionDimension -> Position
        abstract relativePosition: dimension: PositionDimension * value: Position -> NodeSingularPosition
        abstract relativePosition: pos: NodeSingularPositionRelativePositionPos -> NodeSingularPosition
        /// <summary>Get the value of a specified relative position dimension.</summary>
        /// <param name="dimension">The position dimension to get.</param>
        abstract relativePoint: ?dimension: PositionDimension -> Position
        abstract relativePoint: dimension: PositionDimension * value: Position -> NodeSingularPosition
        abstract relativePoint: pos: NodeSingularPositionRelativePointPos -> NodeSingularPosition
        /// Get whether a node is currently grabbed, meaning the user has hold of the node.
        /// http://js.cytoscape.org/#node.grabbed
        abstract grabbed: unit -> bool
        /// Get whether the user can grab a node.
        /// http://js.cytoscape.org/#node.grabbable
        abstract grabbable: unit -> bool
        /// Get whether a node is locked, meaning that its position can not be changed.
        /// http://js.cytoscape.org/#node.locked
        abstract locked: unit -> bool

    type [<AllowNullLiteral>] NodeSingularPositionRenderedPositionPos =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: name: string -> float with get, set

    type [<AllowNullLiteral>] NodeSingularPositionRenderedPointPos =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: name: string -> float with get, set

    type [<AllowNullLiteral>] NodeSingularPositionRelativePositionPos =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: name: string -> float with get, set

    type [<AllowNullLiteral>] NodeSingularPositionRelativePointPos =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: name: string -> float with get, set

    type [<AllowNullLiteral>] ElementPositionFunction =
        [<Emit "$0($1...)">] abstract Invoke: ele: NodeSingular * ix: float -> Position

    type [<AllowNullLiteral>] ElementCollectionFunction =
        [<Emit "$0($1...)">] abstract Invoke: ele: NodeSingular * ix: float * eles: CollectionArgument -> Position

    /// http://js.cytoscape.org/#collection/position--dimensions
    type [<AllowNullLiteral>] NodeCollectionPosition =
        /// <summary>Shift the positions of the nodes by a given model position vector.</summary>
        /// <param name="dimension">The position dimension to shift.</param>
        /// <param name="value">The value to shift the dimension.</param>
        abstract shift: dimension: PositionDimension * ?value: float -> NodeCollectionPosition
        /// <summary>Shift the positions of the nodes by a given model position vector.</summary>
        /// <param name="pos">An object specifying name-value pairs representing dimensions to shift.</param>
        abstract shift: pos: Position -> NodeCollectionPosition
        /// <summary>Set the positions via a function.</summary>
        /// <param name="handler">A callback function that returns the position to set for each element.</param>
        abstract positions: handler: U2<ElementPositionFunction, Position> -> NodeCollectionPosition
        abstract modelPositions: handler: U2<ElementPositionFunction, Position> -> NodeCollectionPosition
        abstract points: handler: U2<ElementPositionFunction, Position> -> NodeCollectionPosition
        /// Allow the user to grab the nodes.
        /// http://js.cytoscape.org/#nodes.grabify
        abstract grabify: unit -> NodeCollectionPosition
        /// Disallow the user to grab the nodes.
        /// http://js.cytoscape.org/#nodes.ungrabify
        abstract ungrabify: unit -> NodeCollectionPosition
        /// Lock the nodes such that their positions can not be changed.
        /// http://js.cytoscape.org/#nodes.lock
        abstract lock: unit -> NodeCollectionPosition
        /// Unlock the nodes such that their positions can be changed.
        /// http://js.cytoscape.org/#nodes.unlock
        abstract unlock: unit -> NodeCollectionPosition

    /// http://js.cytoscape.org/#collection/position--dimensions
    type [<AllowNullLiteral>] SingularPosition =
        /// Get the width of the element.
        abstract width: unit -> float
        /// Get the outer width of the element (includes width, padding, & border).
        abstract outerWidth: unit -> float
        /// Get the width of the element in rendered dimensions.
        abstract renderedWidth: unit -> float
        /// Get the outer width of the element (includes width, padding, & border) in rendered dimensions.
        abstract renderedOuterWidth: unit -> float
        /// Get the height of the element.
        abstract height: unit -> float
        /// Get the outer height of the element (includes height, padding, & border).
        abstract outerHeight: unit -> float
        /// Get the height of the element in rendered dimensions.
        abstract renderedHeight: unit -> float
        /// Get the outer height of the element (includes height, padding, & border) in rendered dimensions.
        abstract renderedOuterHeight: unit -> float
        /// Gets whether the element is active (e.g. on user tap, grab, etc).
        /// http://js.cytoscape.org/#ele.active
        abstract active: unit -> bool

    type [<AllowNullLiteral>] BoundingBoxOptions =
        /// A boolean indicating whether to include nodes in the bounding box (default true). 
        abstract includeNodes: bool option with get, set
        /// A boolean indicating whether to include edges in the bounding box (default true). 
        abstract includeEdges: bool option with get, set
        /// A boolean indicating whether to include labels in the bounding box (default true). 
        abstract includeLabels: bool option with get, set

    /// http://js.cytoscape.org/#collection/position--dimensions
    type [<AllowNullLiteral>] CollectionPosition =
        /// <summary>Get the bounding box of the elements in model coordinates.</summary>
        /// <param name="options">An object containing options for the function.
        /// http://js.cytoscape.org/#eles.boundingBox</param>
        abstract boundingBox: options: BoundingBoxOptions -> U2<BoundingBox12, BoundingBoxWH>
        abstract boundingbox: options: BoundingBoxOptions -> U2<BoundingBox12, BoundingBoxWH>
        /// <summary>Get the bounding box of the elements in rendered coordinates.</summary>
        /// <param name="options">An object containing options for the function.</param>
        abstract renderedBoundingBox: options: BoundingBoxOptions -> U2<BoundingBox12, BoundingBoxWH>
        abstract renderedBoundingbox: options: BoundingBoxOptions -> U2<BoundingBox12, BoundingBoxWH>

    /// http://js.cytoscape.org/#collection/layout
    type [<AllowNullLiteral>] CollectionLayout =
        /// <summary>Get a new layout, which can be used to algorithmically position the nodes in the collection.
        /// This function is useful for running a layout on a subset of the elements in the graph, perhaps in parallel to other layouts.
        /// 
        /// You must specify options.name with the name of the layout you wish to use.
        /// 
        /// Note: that you must call layout.run() in order for it to affect the graph.</summary>
        /// <param name="options">The layout options.</param>
        abstract layout: options: LayoutOptions -> Layouts
        abstract makeLayout: options: LayoutOptions -> Layouts
        abstract createLayout: options: LayoutOptions -> Layouts

    /// http://js.cytoscape.org/#collection/layout
    type [<AllowNullLiteral>] LayoutPositionOptions =
        abstract animate: bool option with get, set
        abstract animationDuration: float option with get, set
        abstract animationEasing: float option with get, set
        abstract eles: CollectionArgument with get, set
        abstract fit: bool option with get, set
        abstract padding: float option with get, set
        abstract pan: Position option with get, set
        abstract ready: obj option with get, set
        abstract stop: obj option with get, set
        abstract spacingFactor: float option with get, set
        abstract zoom: float option with get, set

    type [<AllowNullLiteral>] NodeCollectionLayout =
        /// <summary>Position the nodes for a discrete/synchronous layout.
        /// http://js.cytoscape.org/#nodes.layoutPositions</summary>
        /// <param name="layout">The layout.</param>
        /// <param name="options">The layout options object.</param>
        abstract layoutPositions: layout: string * options: LayoutPositionOptions * handler: ElementPositionFunction -> unit

    /// http://js.cytoscape.org/#collection/layout
    type [<AllowNullLiteral>] LayoutDimensionOptions =
        abstract nodeDimensionsIncludeLabels: bool with get, set

    type [<AllowNullLiteral>] NodeSingularLayout =
        /// <summary>Returns the node width and height.
        /// Meant for use in layout positioning to do overlap detection.</summary>
        /// <param name="options">The layout options object.</param>
        abstract layoutDimensions: options: LayoutDimensionOptions -> NodeSingularLayoutLayoutDimensionsReturn

    type [<AllowNullLiteral>] NodeSingularLayoutLayoutDimensionsReturn =
        abstract x: float with get, set
        abstract y: float with get, set

    /// http://js.cytoscape.org/#collection/selection
    type [<AllowNullLiteral>] SingularSelection =
        /// Get whether the element is selected.
        /// http://js.cytoscape.org/#ele.selected
        abstract selected: unit -> bool
        /// Get whether the element's selection state is mutable.
        /// http://js.cytoscape.org/#ele.selectable
        abstract selectable: unit -> bool

    /// http://js.cytoscape.org/#collection/layout
    type [<AllowNullLiteral>] CollectionSelection =
        /// Make the elements selected (NB other elements outside the collection are not affected).
        /// http://js.cytoscape.org/#eles.select
        abstract select: unit -> CollectionSelection
        /// Make the elements not selected (NB other elements outside the collection are not affected).
        /// http://js.cytoscape.org/#eles.unselect
        abstract unselect: unit -> CollectionSelection
        abstract deselect: unit -> CollectionSelection
        /// Make the selection states of the elements mutable.
        /// http://js.cytoscape.org/#eles.selectify
        abstract selectify: unit -> CollectionSelection
        /// Make the selection states of the elements immutable.
        /// http://js.cytoscape.org/#eles.unselectify
        abstract unselectify: unit -> CollectionSelection

    type ClassName =
        string

    type ClassNames =
        string

    type [<AllowNullLiteral>] CollectionStyle =
        /// <summary>Add classes to elements.
        /// http://js.cytoscape.org/#eles.addClass</summary>
        /// <param name="classes">A space-separated list of class names to add to the elements.</param>
        abstract addClass: classes: ClassNames -> CollectionStyle
        /// <summary>Remove classes from elements.</summary>
        /// <param name="classes">A space-separated list of class names to remove from the elements.
        /// http://js.cytoscape.org/#eles.removeClass</param>
        abstract removeClass: classes: ClassNames -> CollectionStyle
        /// <summary>Toggle whether the elements have the specified classes.</summary>
        /// <param name="classes">A space-separated list of class names to toggle on the elements.</param>
        /// <param name="toggle">[optional] Instead of automatically toggling, adds the classes on truthy values or removes them on falsey values.
        /// http://js.cytoscape.org/#eles.toggleClass</param>
        abstract toggleClass: classes: ClassNames * ?toggle: bool -> CollectionStyle
        /// <summary>Replace the current list of classes on the elements with the specified list.</summary>
        /// <param name="classes">A space-separated list of class names that replaces the current class list.
        /// http://js.cytoscape.org/#eles.classes
        /// Note: can be used to clear all classes (no arguments).</param>
        abstract classes: ?classes: ClassNames -> CollectionStyle
        /// <summary>Add classes to the elements, and then remove the classes after a specified duration.</summary>
        /// <param name="classes">A space-separated list of class names to flash on the elements.</param>
        /// <param name="duration">[optional] The duration in milliseconds that the classes should be added on the elements. After the duration, the classes are removed.
        /// http://js.cytoscape.org/#eles.flashClass</param>
        abstract flashClass: classes: ClassNames * ?duration: float -> CollectionStyle
        /// <summary>Set a particular style property value.</summary>
        /// <param name="name">The name of the visual style property to set.</param>
        /// <param name="value">The value to which the property is set.</param>
        abstract style: name: string * value: obj option -> CollectionStyle
        /// <summary>Get a particular style property value.</summary>
        /// <param name="name">The name of the visual style property to get.</param>
        abstract style: name: string -> obj option
        /// <summary>Set several particular style property values.</summary>
        /// <param name="obj">An object of style property name-value pairs to set.</param>
        abstract style: obj: obj -> CollectionStyle
        /// Get a name-value pair object containing visual style properties and their values for the element.
        abstract style: unit -> CollectionStyleStyleReturn
        /// <summary>Set a particular style property value.</summary>
        /// <param name="name">The name of the visual style property to set.</param>
        /// <param name="value">The value to which the property is set.</param>
        abstract css: name: string * value: obj option -> CollectionStyle
        /// <summary>Get a particular style property value.</summary>
        /// <param name="name">The name of the visual style property to get.</param>
        abstract css: name: string -> obj option
        /// <summary>Set several particular style property values.</summary>
        /// <param name="obj">An object of style property name-value pairs to set.</param>
        abstract css: obj: obj -> CollectionStyle
        /// Get a name-value pair object containing visual style properties and their values for the element.
        abstract css: unit -> CollectionStyleCssReturn
        /// <summary>Remove all or specific style overrides.</summary>
        /// <param name="names">A space-separated list of property names to remove overrides</param>
        abstract removeStyle: ?names: string -> CollectionStyle

    type [<AllowNullLiteral>] CollectionStyleStyleReturn =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: index: string -> obj option with get, set

    type [<AllowNullLiteral>] CollectionStyleCssReturn =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: index: string -> obj option with get, set

    /// http://js.cytoscape.org/#collection/style
    type [<AllowNullLiteral>] SingularStyle =
        /// <summary>Get whether an element has a particular class.</summary>
        /// <param name="className">The name of the class to test for.
        /// http://js.cytoscape.org/#ele.hasClass</param>
        abstract hasClass: className: ClassName -> bool
        /// Get a name-value pair object containing rendered visual
        /// style properties and their values for the element.
        abstract renderedStyle: unit -> SingularStyleRenderedStyleReturn
        abstract renderedStyle: name: string -> obj option
        abstract renderedCss: unit -> SingularStyleRenderedCssReturn
        abstract renderedCss: name: string -> obj option
        /// <summary>Get the numeric value of a style property in
        /// preferred units that can be used for calculations.</summary>
        /// <param name="name">The name of the style property to get.
        /// http://js.cytoscape.org/#ele.numericStyle</param>
        abstract numericStyle: name: string -> obj option
        /// <summary>Get the units that ele.numericStyle() is expressed in, for a particular property.</summary>
        /// <param name="name">The name of the style property to get.
        /// http://js.cytoscape.org/#ele.numericStyleUnits</param>
        abstract numericStyleUnits: name: string -> obj option
        /// Get whether the element is visible.
        /// http://js.cytoscape.org/#ele.visible
        abstract visible: unit -> bool
        /// Get whether the element is hidden.
        /// http://js.cytoscape.org/#ele.visible
        abstract hidden: unit -> bool
        /// Get the effective opacity of the element
        ///   (i.e. on-screen opacity),
        /// which takes into consideration parent node opacity.
        /// http://js.cytoscape.org/#ele.effectiveOpacity
        abstract effectiveOpacity: unit -> float
        /// Get whether the element's effective opacity is completely transparent,
        /// which takes into consideration parent node opacity.
        /// http://js.cytoscape.org/#ele.transparent
        abstract transparent: unit -> float

    type [<AllowNullLiteral>] SingularStyleRenderedStyleReturn =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: name: string -> obj option with get, set

    type [<AllowNullLiteral>] SingularStyleRenderedCssReturn =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: name: string -> obj option with get, set

    /// http://js.cytoscape.org/#collection/animation
    type [<AllowNullLiteral>] ElementAnimateOptionsBase =
        /// An object containing name-value pairs of style properties to animate. 
        abstract style: TypeLiteral_01 option with get, set
        /// The duration of the animation in milliseconds. 
        abstract duration: float option with get, set
        /// A boolean indicating whether to queue the animation. 
        abstract queue: bool option with get, set
        /// A function to call when the animation is done. 
        abstract complete: unit -> unit
        /// A function to call each time the animation steps. 
        abstract step: unit -> unit
        /// A transition-timing-function easing style string that shapes the animation progress curve. 
        abstract easing: Css.TransitionTimingFunction option with get, set

    type [<AllowNullLiteral>] ElementAnimateOptionPos =
        inherit ElementAnimateOptionsBase
        /// A position to which the elements will be animated. 
        abstract position: Position with get, set

    type [<AllowNullLiteral>] ElementAnimateOptionRen =
        inherit ElementAnimateOptionsBase
        /// A rendered position to which the elements will be animated. 
        abstract renderedPosition: Position with get, set

    type [<AllowNullLiteral>] CollectionAnimation =
        /// <summary>Animate the elements.</summary>
        /// <param name="options">An object containing the details of the animation.
        /// http://js.cytoscape.org/#eles.animate</param>
        abstract animate: options: U2<ElementAnimateOptionPos, ElementAnimateOptionRen> * ?``params``: ElementAnimateOptionsBase -> CollectionAnimation
        /// <summary>Add a delay between animations for the elements.</summary>
        /// <param name="duration">How long the delay should be in milliseconds.</param>
        /// <param name="complete">A function to call when the delay is complete.
        /// http://js.cytoscape.org/#eles.delay</param>
        abstract delay: duration: float * complete: (unit -> unit) -> CollectionAnimation
        /// <summary>Stop all animations that are currently running.</summary>
        /// <param name="clearQueue">A boolean, indicating whether the queue of animations should be emptied.</param>
        /// <param name="jumpToEnd">A boolean, indicating whether the currently-running animations should jump to their ends rather than just stopping midway.
        /// http://js.cytoscape.org/#eles.stop</param>
        abstract stop: clearQueue: bool * jumpToEnd: bool -> CollectionAnimation
        /// Remove all queued animations for the elements.
        /// http://js.cytoscape.org/#eles.clearQueue
        abstract clearQueue: unit -> CollectionAnimation

    type [<AllowNullLiteral>] SingularAnimationOptionsBase =
        /// A position to which the elements will be animated. 
        abstract position: Position with get, set
        /// A rendered position to which the elements will be animated. 
        abstract renderedPosition: Position with get, set
        /// An object containing name-value pairs of style properties to animate. 
        abstract style: obj option with get, set
        /// The duration of the animation in milliseconds. 
        abstract duration: float with get, set
        /// A transition-timing-function easing style string that shapes the animation progress curve. 
        abstract easing: Css.TransitionTimingFunction with get, set

    type [<AllowNullLiteral>] SingularAnimationOptionsPos =
        inherit SingularAnimationOptionsBase
        /// A position to which the elements will be animated. 
        abstract position: Position with get, set

    type [<AllowNullLiteral>] SingularAnimationOptionsRen =
        inherit SingularAnimationOptionsBase
        /// A rendered position to which the elements will be animated. 
        abstract renderedPosition: Position with get, set

    type [<AllowNullLiteral>] SingularAnimation =
        /// Get whether the element is currently being animated.
        abstract animated: unit -> bool
        /// <summary>Get an animation for the element.</summary>
        /// <param name="options">An object containing the details of the animation.</param>
        abstract animation: options: U2<SingularAnimationOptionsRen, SingularAnimationOptionsPos> -> AnimationManipulation
        /// <summary>Get a delay animation for the element.</summary>
        /// <param name="duration">How long the delay should be in milliseconds.
        /// http://js.cytoscape.org/#ele.delayAnimation</param>
        abstract delayAnimation: duration: float -> AnimationManipulation

    /// http://js.cytoscape.org/#collection/comparison
    type [<AllowNullLiteral>] CollectionComparision =
        /// <summary>Determine whether this collection contains exactly the same elements as another collection.</summary>
        /// <param name="eles">The other elements to compare to.</param>
        abstract same: eles: CollectionArgument -> bool
        /// <summary>Determine whether this collection contains any of the same elements as another collection.</summary>
        /// <param name="eles">The other elements to compare to.</param>
        abstract anySame: eles: CollectionArgument -> bool
        /// Determine whether this collection contains all of the elements of another collection.
        abstract contains: eles: CollectionArgument -> bool
        /// Determine whether this collection contains all of the elements of another collection.
        abstract has: eles: CollectionArgument -> bool
        /// <summary>Determine whether all elements in the specified collection are in the neighbourhood of the calling collection.</summary>
        /// <param name="eles">The other elements to compare to.</param>
        abstract allAreNeighbors: eles: CollectionArgument -> bool
        /// <summary>Determine whether all elements in the specified collection are in the neighbourhood of the calling collection.</summary>
        /// <param name="eles">The other elements to compare to.</param>
        abstract allAreNeighbours: eles: CollectionArgument -> bool
        /// <summary>Determine whether any element in this collection matches a selector.</summary>
        /// <param name="selector">The selector to match against.</param>
        abstract is: selector: Selector -> bool
        /// <summary>Determine whether all elements in the collection match a selector.</summary>
        /// <param name="selector">The selector to match against.</param>
        abstract allAre: selector: Selector -> bool
        /// <summary>Determine whether any element in this collection satisfies the specified test function.</summary>
        /// <param name="test">The test function that returns truthy values for elements that satisfy the test and falsey values for elements that do not satisfy the test.
        /// ele - The current element.
        /// i - The index of the current element.
        /// eles - The collection of elements being tested.</param>
        /// <param name="thisArg">[optional] The value for this within the test function.</param>
        abstract some: test: (CollectionArgument -> float -> CollectionArgument -> bool) * ?thisArg: obj -> bool
        /// <summary>Determine whether all elements in this collection satisfy the specified test function.</summary>
        /// <param name="test">The test function that returns truthy values for elements that satisfy the test and falsey values for elements that do not satisfy the test.
        /// ele - The current element.
        /// i - The index of the current element.
        /// eles - The collection of elements being tested.</param>
        /// <param name="thisArg">[optional] The value for this within the test function.</param>
        abstract every: test: (CollectionArgument -> float -> CollectionArgument -> bool) * ?thisArg: obj -> bool

    /// http://js.cytoscape.org/#collection/iteration
    type [<AllowNullLiteral>] CollectionIteration<'TOut, 'TIn> =
        /// Get the number of elements in the collection.
        abstract size: unit -> float
        /// Get the number of elements in the collection.
        abstract length: float with get, set
        /// Get whether the collection is empty, meaning it has no elements.
        abstract empty: unit -> bool
        /// Get whether the collection is nonempty, meaning it has elements.
        abstract nonempty: unit -> bool
        /// <summary>Iterate over the elements in the collection using an implementation like the native array function namesake.
        /// 
        /// This function behaves like Array.prototype.forEach() with minor changes for convenience:
        /// You can exit the iteration early by returning false in the iterating function.
        /// The Array.prototype.forEach() implementation does not support this, but it is included anyway on account of its utility.</summary>
        /// <param name="each">The function executed each iteration.
        /// ele - The current element.
        /// i - The index of the current element.
        /// eles - The collection of elements being iterated.</param>
        /// <param name="thisArg">[optional] The value for this within the iterating function.</param>
        abstract each: each: ('TIn -> float -> CollectionIteration<'TOut, 'TIn> -> U2<unit, bool>) * ?thisArg: obj -> CollectionIteration<'TOut, 'TIn>
        abstract forEach: each: ('TIn -> float -> CollectionIteration<'TOut, 'TIn> -> U2<unit, bool>) * ?thisArg: obj -> CollectionIteration<'TOut, 'TIn>
        /// <summary>Get an element at a particular index in the collection.
        /// 
        /// You may use eles[i] in place of eles.eq(i) as a more performant alternative.</summary>
        /// <param name="index">The index of the element to get.</param>
        abstract eq: index: float -> 'TOut
        /// Get an element at a particular index in the collection.
        [<Emit "$0[$1]{{=$2}}">] abstract Item: index: float -> 'TOut with get, set
        /// Get the first element in the collection.
        abstract first: unit -> 'TOut
        /// Get the last element in the collection.
        abstract last: unit -> 'TOut
        /// <summary>Get a subset of the elements in the collection based on specified indices.</summary>
        /// <param name="start">[optional] An integer that specifies where to start the selection.
        /// The first element has an index of 0.
        /// Use negative numbers to select from the end of an array.</param>
        /// <param name="end">[optional] An integer that specifies where to end the selection.
        /// If omitted, all elements from the start position and to the end of the array will be selected.
        /// Use negative numbers to select from the end of an array.</param>
        abstract slice: ?start: float * ?``end``: float -> CollectionIteration<'TOut, 'TIn>
        /// Get the collection as an array, maintaining the order of the elements.
        abstract toArray: unit -> ResizeArray<'TOut>

    type [<AllowNullLiteral>] CollectionBuildingUnionFunc =
        [<Emit "$0($1...)">] abstract Invoke: eles: U3<CollectionArgument, ResizeArray<CollectionArgument>, Selector> -> CollectionReturnValue

    type [<AllowNullLiteral>] CollectionBuildingDifferenceFunc =
        [<Emit "$0($1...)">] abstract Invoke: eles: U2<CollectionArgument, Selector> -> CollectionReturnValue

    type [<AllowNullLiteral>] CollectionBuildingIntersectionFunc =
        [<Emit "$0($1...)">] abstract Invoke: eles: U2<CollectionArgument, Selector> -> CollectionReturnValue

    type [<AllowNullLiteral>] CollectionSymmetricDifferenceFunc =
        [<Emit "$0($1...)">] abstract Invoke: eles: U2<CollectionArgument, Selector> -> CollectionReturnValue

    /// http://js.cytoscape.org/#collection/building--filtering
    type [<AllowNullLiteral>] CollectionBuildingFiltering<'TIn, 'TOut> =
        /// <summary>Get an element in the collection from its ID in a very performant way.</summary>
        /// <param name="id">The ID of the element to get.</param>
        abstract getElementById: id: string -> 'TOut
        /// <summary>Get an element in the collection from its ID in a very performant way.</summary>
        /// <param name="id">The ID of the element to get.</param>
        abstract ``$id``: id: string -> 'TOut
        /// Get a new collection, resulting from adding the collection with another one
        /// http://js.cytoscape.org/#eles.union
        abstract union: CollectionBuildingUnionFunc with get, set
        abstract u: CollectionBuildingUnionFunc with get, set
        abstract add: CollectionBuildingUnionFunc with get, set
        //abstract +: CollectionBuildingUnionFunc with get, set
        [<Emit("$0[\"or\"]{{=$1}}")>]
        abstract ``or``: CollectionBuildingUnionFunc with get, set
        //abstract |: CollectionBuildingUnionFunc with get, set
        /// Get a new collection, resulting from the collection without some specified elements.
        /// http://js.cytoscape.org/#eles.difference
        abstract difference: CollectionBuildingDifferenceFunc with get, set
        abstract subtract: CollectionBuildingDifferenceFunc with get, set
        //abstract \\: CollectionBuildingDifferenceFunc with get, set
        abstract not: CollectionBuildingDifferenceFunc with get, set
        //abstract !: CollectionBuildingDifferenceFunc with get, set
        abstract relativeComplement: CollectionBuildingDifferenceFunc with get, set
        //abstract ``-``: CollectionBuildingDifferenceFunc with get, set
        /// Get all elements in the graph that are not in the calling collection.
        /// http://js.cytoscape.org/#eles.absoluteComplement
        abstract absoluteComplement: unit -> CollectionReturnValue
        abstract abscomp: unit -> CollectionReturnValue
        abstract complement: unit -> CollectionReturnValue
        /// Get the elements in both this collection and another specified collection.
        /// http://js.cytoscape.org/#eles.intersection
        abstract intersection: CollectionBuildingIntersectionFunc with get, set
        abstract intersect: CollectionBuildingIntersectionFunc with get, set
        [<Emit("$0[\"and\"]{{=$1}}")>]
        abstract ``and``: CollectionBuildingIntersectionFunc with get, set
        abstract n: CollectionBuildingIntersectionFunc with get, set
        //abstract &: CollectionBuildingIntersectionFunc with get, set
        //abstract ``.``: CollectionBuildingIntersectionFunc with get, set
        /// Get the elements that are in the calling collection
        /// or the passed collection but not in both.
        /// http://js.cytoscape.org/#eles.symmetricDifference
        abstract symmetricDifference: CollectionSymmetricDifferenceFunc with get, set
        abstract symdiff: CollectionSymmetricDifferenceFunc with get, set
        abstract xor: CollectionSymmetricDifferenceFunc with get, set
        //abstract ^: CollectionSymmetricDifferenceFunc with get, set
        //abstract (+): CollectionSymmetricDifferenceFunc with get, set
        //abstract ``(-)``: CollectionSymmetricDifferenceFunc with get, set
        /// <summary>Perform a traditional left/right diff on the two collections.</summary>
        /// <param name="selector">A selector representing the elements on the right side of the diff. All elements in the graph matching the selector are used as the passed collection.
        /// The elements on the right side of the diff.</param>
        abstract diff: selector: U2<Selector, CollectionArgument> -> CollectionBuildingFilteringDiffReturn
        /// <summary>Perform a in-place merge of the given elements into the calling collection.</summary>
        /// <param name="eles">The elements to merge in-place or a selector representing the elements to merge.
        /// All elements in the graph matching the selector are used as the passed collection.
        /// 
        /// This function modifies the calling collection instead of returning a new one.
        /// Use of this function should be considered for performance in some cases, but otherwise should be avoided. Consider using eles.union() instead.
        /// Use this function only on new collections that you create yourself, using cy.collection().
        /// This ensures that you do not unintentionally modify another collection.
        /// 
        /// Examples
        /// With a collection:</param>
        abstract merge: eles: U2<CollectionArgument, Selector> -> CollectionBuildingFiltering<'TIn, 'TOut>
        /// <summary>Perform an in-place operation on the calling collection to remove the given elements.</summary>
        /// <param name="eles">The elements to remove  in-place or a selector representing the elements to remove .
        /// All elements in the graph matching the selector are used as the passed collection.
        /// 
        /// This function modifies the calling collection instead of returning a new one.
        /// Use of this function should be considered for performance in some cases, but otherwise should be avoided. Consider using eles.filter() or eles.remove() instead.
        /// Use this function only on new collections that you create yourself, using cy.collection().
        /// This ensures that you do not unintentionally modify another collection.
        /// 
        /// Examples
        /// With a collection:</param>
        abstract unmerge: eles: U2<CollectionArgument, Selector> -> CollectionBuildingFiltering<'TIn, 'TOut>
        /// <summary>Get a new collection containing elements that are accepted by the specified filter.</summary>
        /// <param name="selector">The selector to match against.</param>
        abstract filter: selector: U2<Selector, ('TIn -> float -> CollectionArgument -> bool)> -> CollectionReturnValue
        /// <summary>Get the nodes that match the specified selector.</summary>
        /// <param name="selector">The selector to match against.
        /// http://js.cytoscape.org/#eles.filter</param>
        abstract nodes: ?selector: Selector -> NodeCollection
        /// <summary>Get the edges that match the specified selector.</summary>
        /// <param name="selector">The selector to match against.
        /// http://js.cytoscape.org/#eles.filter</param>
        abstract edges: ?selector: Selector -> EdgeCollection
        /// <summary>Get a new collection containing the elements sorted by the
        /// specified comparison function.</summary>
        /// <param name="sort">The sorting comparison function that returns a negative number
        /// for ele1 before ele2, 0 for ele1 same as ele2,
        /// or a positive number for ele1 after ele2.
        /// 
        /// http://js.cytoscape.org/#eles.sort</param>
        abstract sort: sort: ('TIn -> 'TIn -> float) -> CollectionReturnValue
        /// <summary>Get an array containing values mapped from the collection.</summary>
        /// <param name="fn">The function that returns the mapped value for each element.
        /// ele - The current element.
        /// i - The index of the current element.
        /// eles - The collection of elements being mapped.</param>
        /// <param name="thisArg">[optional] The value for this within the iterating function.
        /// 
        /// http://js.cytoscape.org/#eles.map</param>
        abstract map: fn: ('TIn -> float -> CollectionArgument -> 'T) * ?thisArg: obj -> ResizeArray<'T>
        /// <summary>Reduce a single value by applying a
        /// function against an accumulator and each value of the collection.</summary>
        /// <param name="fn">The function that returns the accumulated value
        /// given the previous value and the current element.
        /// prevVal The value accumulated from previous elements.
        /// ele The current element.
        /// i The index of the current element.
        /// eles The collection of elements being reduced.</param>
        /// <param name="initialValue">The initial value for reducing
        /// It is used also for type inference of output, but the type can be
        /// also stated explicitly as generic
        /// http://js.cytoscape.org/#eles.reduce</param>
        abstract reduce: fn: ('T -> 'TIn -> float -> CollectionArgument -> 'T) * initialValue: 'T -> 'T
        /// <summary>Find a minimum value in a collection.</summary>
        /// <param name="fn">The function that returns the value to compare for each element.
        /// ele - The current element.
        /// i - The index of the current element.
        /// eles - The collection of elements being mapped.</param>
        /// <param name="thisArg">[optional] The value for this within the iterating function.
        /// 
        /// http://js.cytoscape.org/#eles.min</param>
        abstract min: fn: ('TIn -> float -> CollectionArgument -> 'T) * ?thisArg: obj -> CollectionBuildingFilteringMinReturn
        /// <summary>Find a maximum value and the corresponding element.</summary>
        /// <param name="fn">The function that returns the value to compare for each element.
        /// ele - The current element.
        /// i - The index of the current element.
        /// eles - The collection of elements being mapped.</param>
        /// <param name="thisArg">[optional] The value for this within the iterating function.
        /// 
        /// http://js.cytoscape.org/#eles.max</param>
        abstract max: fn: ('TIn -> float -> CollectionArgument -> 'T) * ?thisArg: obj -> CollectionBuildingFilteringMaxReturn

    type [<AllowNullLiteral>] CollectionBuildingFilteringDiffReturn =
        abstract left: CollectionReturnValue with get, set
        abstract right: CollectionReturnValue with get, set
        abstract both: CollectionReturnValue with get, set

    type [<AllowNullLiteral>] CollectionBuildingFilteringMinReturn =
        /// The minimum value found.
        abstract value: 'T with get, set
        /// The element that corresponds to the minimum value.
        abstract ele: SingularElementReturnValue with get, set

    type [<AllowNullLiteral>] CollectionBuildingFilteringMaxReturn =
        /// The minimum value found.
        abstract value: 'T with get, set
        /// The element that corresponds to the minimum value.
        abstract ele: SingularElementReturnValue with get, set

    type MinumumSpanningTree =
        obj option

    type [<AllowNullLiteral>] CollectionTraversing =
        /// <summary>Get the open neighbourhood of the elements.
        /// 
        /// The neighbourhood returned by this function is a bit different than the traditional definition of a "neighbourhood":
        /// This returned neighbourhood includes the edges connecting the collection to the neighbourhood. This gives you more flexibility.
        /// An open neighbourhood is one that does not include the original set of elements. If unspecified, a neighbourhood is open by default.</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract neighborhood: ?selector: Selector -> CollectionReturnValue
        /// <summary>Get the open neighbourhood of the elements.
        /// 
        /// The neighbourhood returned by this function is a bit different than the traditional definition of a "neighbourhood":
        /// This returned neighbourhood includes the edges connecting the collection to the neighbourhood. This gives you more flexibility.
        /// An open neighbourhood is one that does not include the original set of elements. If unspecified, a neighbourhood is open by default.</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract openNeighborhood: ?selector: Selector -> CollectionReturnValue
        /// <summary>Get the closed neighbourhood of the elements.
        /// 
        /// The neighbourhood returned by this function is a bit different than the traditional definition of a "neighbourhood":
        /// This returned neighbourhood includes the edges connecting the collection to the neighbourhood. This gives you more flexibility.
        /// A closed neighbourhood is one that does include the original set of elements.</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract closedNeighborhood: ?selector: Selector -> CollectionReturnValue
        /// Get the connected components, considering only the elements in the calling collection.
        /// An array of collections is returned, with each collection representing a component.
        abstract components: unit -> ResizeArray<CollectionReturnValue>

    /// http://js.cytoscape.org/#collection/edge-points
    type [<AllowNullLiteral>] EdgeSingularPoints =
        /// Get an array of control point model positions for a {@code curve-style: bezier) or {@code curve-style: unbundled-bezier} edge.
        /// 
        /// While the control points may be specified relatively in the CSS,
        /// this function returns the absolute model positions of the control points.
        /// The points are specified in the order of source-to-target direction.
        /// This function works for bundled beziers, but it is not applicable to the middle, straight-line edge in the bundle.
        abstract controlPoints: unit -> ResizeArray<Position>
        /// Get an array of segment point model positions (i.e. bend points) for a {@code curve-style: segments} edge.
        /// 
        /// While the segment points may be specified relatively in the stylesheet,
        /// this function returns the absolute model positions of the segment points.
        /// The points are specified in the order of source-to-target direction.
        abstract segmentPoints: unit -> ResizeArray<Position>
        /// Get the model position of where the edge ends, towards the source node.
        abstract sourceEndpoint: unit -> Position
        /// Get the model position of where the edge ends, towards the target node.
        abstract targetEndpoint: unit -> Position
        /// Get the model position of the midpoint of the edge.
        /// 
        /// The midpoint is, by default, where the edge’s label is centred. It is also the position towards which mid arrows point.
        /// For curve-style: unbundled-bezier edges, the midpoint is the middle extremum if the number of control points is odd.
        /// For an even number of control points, the midpoint is where the two middle-most control points meet.
        /// This is the middle inflection point for bilaterally symmetric or skew symmetric edges, for example.
        /// For curve-style: segments edges, the midpoint is the middle segment point if the number of segment points is odd.
        /// For an even number of segment points, the overall midpoint is the midpoint of the middle-most line segment (i.e. the mean of the middle two segment points).
        abstract midpoint: unit -> Position

    type [<AllowNullLiteral>] EdgeSingularTraversing =
        /// <summary>Get source node of this edge.</summary>
        /// <param name="selector">An optional selector that is used to filter the resultant collection.
        /// http://js.cytoscape.org/#edge.source</param>
        abstract source: ?selector: Selector -> NodeSingular
        /// <summary>Get target node of this edge.</summary>
        /// <param name="selector">An optional selector that is used to filter the resultant collection.
        /// http://js.cytoscape.org/#edge.target</param>
        abstract target: ?selector: Selector -> NodeSingular

    type [<AllowNullLiteral>] EdgeCollectionTraversing =
        /// <summary>Get the nodes connected to the edges in the collection</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract connectedNodes: ?selector: Selector -> NodeCollection
        /// <summary>Get source nodes connected to the edges in the collection.</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract sources: ?selector: Selector -> NodeCollection
        /// <summary>Get target nodes connected to the edges in the collection.</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract targets: ?selector: Selector -> NodeCollection
        /// <summary>Get edges parallel to those in the collection.
        /// 
        /// Two edges are said to be parallel if they connect the same two nodes.
        /// Any two parallel edges may connect nodes in the same direction, in which case the edges share the same source and target.
        /// They may alternatively connect nodes in the opposite direction, in which case the source and target are reversed in the second edge.
        /// That is:
        /// - edge1.source().id() === edge2.source().id()
        ///    && edge1.target().id() === edge2.target().id()
        /// OR
        /// - edge1.source().id() === edge2.target().id()
        ///    && edge1.target().id() === edge2.source().id()</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract parallelEdges: ?selector: Selector -> EdgeCollection
        /// <summary>Get edges codirected to those in the collection.
        /// 
        /// Two edges are said to be codirected if they connect the same two nodes in the same direction: The edges have the same source and target.
        /// That is:
        /// - edge1.source().id() === edge2.source().id()
        ///    && edge1.target().id() === edge2.target().id()</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract codirectedEdges: ?selector: Selector -> EdgeCollection

    type [<AllowNullLiteral>] NodeCollectionTraversing =
        /// <summary>Get the edges connecting the collection to another collection. Direction of the edges does not matter.</summary>
        /// <param name="eles">The other collection.</param>
        abstract edgesWith: eles: U2<CollectionArgument, Selector> -> EdgeCollection
        /// <summary>Get the edges coming from the collection (i.e. the source) going to another collection (i.e. the target).</summary>
        /// <param name="eles">The other collection.</param>
        abstract edgesTo: eles: U2<CollectionArgument, Selector> -> EdgeCollection
        /// <summary>Get the edges connected to the nodes in the collection.</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract connectedEdges: ?selector: Selector -> EdgeCollection
        /// <summary>From the set of calling nodes, get the nodes which are roots (i.e. no incoming edges, as in a directed acyclic graph).</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract roots: ?selector: Selector -> NodeCollection
        /// <summary>From the set of calling nodes, get the nodes which are leaves (i.e. no outgoing edges, as in a directed acyclic graph).</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract leaves: ?selector: Selector -> NodeCollection
        /// <summary>Get edges (and their targets) coming out of the nodes in the collection.</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract outgoers: ?selector: Selector -> CollectionReturnValue
        /// <summary>Recursively get edges (and their targets) coming out of the nodes in the collection (i.e. the outgoers, the outgoers' outgoers, ...).</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract successors: ?selector: Selector -> CollectionReturnValue
        /// <summary>Get edges (and their sources) coming into the nodes in the collection.</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract incomers: ?selector: Selector -> CollectionReturnValue
        /// <summary>Recursively get edges (and their sources) coming into the nodes in the collection (i.e. the incomers, the incomers' incomers, ...).</summary>
        /// <param name="selector">[optional] An optional selector that is used to filter the resultant collection.</param>
        abstract predecessors: ?selector: Selector -> CollectionReturnValue

    type [<AllowNullLiteral>] WeightFn =
        [<Emit "$0($1...)">] abstract Invoke: edge: EdgeCollection -> float

    type [<AllowNullLiteral>] SearchVisitFunction =
        [<Emit "$0($1...)">] abstract Invoke: v: NodeCollection * e: EdgeCollection * u: NodeCollection * i: float * depth: float -> U2<bool, unit>

    type [<AllowNullLiteral>] SearchFirstOptions =
        /// The root nodes (selector or collection) to start the search from.
        abstract roots: U2<Selector, CollectionArgument> with get, set
        /// A handler function that is called when a node is visited in the search.
        abstract visit: SearchVisitFunction option with get, set
        /// A boolean indicating whether the algorithm should only go along edges from source to target (default false).
        abstract directed: bool option with get, set

    type [<AllowNullLiteral>] SearchFirstResult =
        /// The path of the search.
        /// - The path returned includes edges such that if path[i] is a node, then path[i - 1] is the edge used to get to that node.
        abstract path: CollectionArgument with get, set
        /// The node found by the search
        /// - If no node was found, then found is empty.
        /// - If your handler function returns false, then the only the path up to that point is returned.
        abstract found: NodeCollection with get, set

    /// http://js.cytoscape.org/#eles.dijkstra
    type [<AllowNullLiteral>] SearchDijkstraOptions =
        /// The root node (selector or collection) where the algorithm starts.
        abstract root: U2<Selector, CollectionArgument> with get, set
        /// A function that returns the positive numeric weight for this edge.
        /// 
        /// If no weight function is defined, a constant weight of 1 is used for each edge.
        abstract weight: WeightFn option with get, set
        /// A boolean indicating whether the algorithm should only go along edges from source to target (default false).
        abstract directed: bool option with get, set

    /// http://js.cytoscape.org/#eles.dijkstra
    type [<AllowNullLiteral>] SearchDijkstraResult =
        /// Returns the distance from the source node to node.
        abstract distanceTo: node: NodeSingular -> float
        /// Returns a collection containing the shortest path from the source node to node.
        /// The path starts with the source node and includes the edges between the nodes in the path such that if pathTo(node)[i] is an edge,
        /// then pathTo(node)[i-1] is the previous node in the path and pathTo(node)[i+1] is the next node in the path.
        abstract pathTo: node: NodeSingular -> CollectionReturnValue

    /// http://js.cytoscape.org/#eles.aStar
    type [<AllowNullLiteral>] SearchAStarOptions =
        abstract root: U2<Selector, CollectionArgument> with get, set
        abstract goal: U2<Selector, CollectionArgument> with get, set
        abstract weight: WeightFn option with get, set
        abstract heuristic: node: NodeCollection -> float
        abstract directed: bool option with get, set

    /// http://js.cytoscape.org/#eles.aStar
    type [<AllowNullLiteral>] SearchAStarResult =
        abstract found: bool with get, set
        abstract distance: float with get, set
        abstract path: CollectionReturnValue with get, set

    /// http://js.cytoscape.org/#eles.floydWarshall
    type [<AllowNullLiteral>] SearchFloydWarshallOptions =
        abstract weight: WeightFn with get, set
        abstract directed: bool option with get, set

    /// http://js.cytoscape.org/#eles.floydWarshall
    type [<AllowNullLiteral>] SearchFloydWarshallResult =
        /// Returns the distance from the source node to node.
        abstract distance: fromNode: U2<NodeSingular, CollectionSelection> * toNode: U2<NodeSingular, Selector> -> float
        /// Returns a collection containing the shortest path from the source node to node.
        /// The path starts with the source node and includes the edges
        /// between the nodes in the path such that if pathTo(node)[i] is an edge,
        /// then pathTo(node)[i-1] is the previous node in the path and pathTo(node)[i+1]
        /// is the next node in the path.
        abstract path: fromNode: U2<NodeSingular, CollectionSelection> * toNode: U2<NodeSingular, Selector> -> CollectionReturnValue

    /// http://js.cytoscape.org/#eles.bellmanFord
    type [<AllowNullLiteral>] SearchBellmanFordOptions =
        /// The root node (selector or collection) where the search starts.
        abstract root: obj option with get, set
        /// A function that returns the positive numeric weight for this edge.
        abstract weight: WeightFn option with get, set
        /// Indicating whether the algorithm should only go along
        /// edges from source to target (default false).
        abstract directed: bool with get, set

    /// http://js.cytoscape.org/#eles.bellmanFord
    type [<AllowNullLiteral>] SearchBellmanFordResult =
        /// function that computes the shortest path from root node to the argument node
        /// (either objects or selector string)
        abstract pathTo: node: U2<NodeSingular, Selector> -> CollectionReturnValue
        /// function that computes the shortest distance from root node to argument node
        /// (either objects or selector string)
        abstract distanceTo: node: U2<NodeSingular, Selector> -> float
        abstract hasNegativeWeightCycle: bool with get, set

    /// http://js.cytoscape.org/#eles.kruskal
    /// trivial so implemented in the function
    /// http://js.cytoscape.org/#eles.pageRank
    type [<AllowNullLiteral>] SearchPageRankOptions =
        /// Numeric parameter for the algorithm. 
        abstract dampingFactor: float option with get, set
        /// Numeric parameter that represents the required precision. 
        abstract precision: float option with get, set
        /// Maximum number of iterations to perform. 
        abstract iterations: float option with get, set

    /// http://js.cytoscape.org/#eles.pageRank
    type [<AllowNullLiteral>] SearchPageRankResult =
        /// function that computes the rank of a given node (either object or selector string) 
        abstract rank: node: NodeCollection -> float

    /// http://js.cytoscape.org/#eles.degreeCentrality
    type [<AllowNullLiteral>] SearchDegreeCentralityOptions =
        /// The root node (selector or collection) for which the
        /// centrality calculation is made.
        abstract root: U2<NodeSingular, Selector> with get, set
        /// A function that returns the weight for the edge. 
        abstract weight: edge: EdgeSingular -> float
        /// The alpha value for the centrality calculation, ranging on [0, 1].
        /// With value 0 (default), disregards edge weights and solely uses
        /// number of edges in the centrality calculation. With value 1,
        /// disregards number of edges and solely uses the edge weights
        /// in the centrality calculation.
        abstract alpha: float option with get, set
        /// Whether the directed indegree and outdegree centrality is calculated (true) or
        /// whether the undirected centrality is calculated (false, default).
        abstract directed: bool option with get, set

    /// http://js.cytoscape.org/#eles.degreeCentrality
    type [<AllowNullLiteral>] SearchDegreeCentralityResultUndirected =
        /// the degree centrality of the root node 
        abstract degree: float with get, set

    type [<AllowNullLiteral>] SearchDegreeCentralityResultDirected =
        abstract indegree: float with get, set
        abstract outdegree: float with get, set

    /// http://js.cytoscape.org/#eles.degreeCentralityNormalized
    type [<AllowNullLiteral>] SearchDegreeCentralityNormalizedOptions =
        /// A function that returns the weight for the edge. 
        abstract weight: edge: EdgeSingular -> float
        /// The alpha value for the centrality calculation, ranging on [0, 1].
        /// With value 0 (default), disregards edge weights and solely uses
        /// number of edges in the centrality calculation. With value 1,
        /// disregards number of edges and solely uses the edge weights
        /// in the centrality calculation.
        abstract alpha: float option with get, set
        /// A boolean indicating whether the directed indegree and outdegree centrality is calculated (true) or
        /// whether the undirected centrality is calculated (false, default).
        abstract directed: bool option with get, set

    /// http://js.cytoscape.org/#eles.degreeCentralityNormalized
    type [<AllowNullLiteral>] SearchDegreeCentralityNormalizedResultUndirected =
        /// the normalised degree centrality of the specified node 
        abstract degree: node: NodeSingular -> obj option

    type [<AllowNullLiteral>] SearchDegreeCentralityNormalizedResultDirected =
        /// the normalised indegree centrality of the specified node 
        abstract indegree: node: NodeSingular -> obj option
        /// the normalised outdegree centrality of the specified node 
        abstract outdegree: node: NodeSingular -> obj option

    /// http://js.cytoscape.org/#eles.closenessCentrality
    type [<AllowNullLiteral>] SearchClosenessCentralityOptions =
        /// The root node (selector or collection) for which the
        /// centrality calculation is made.
        abstract root: U2<NodeSingular, Selector> with get, set
        /// A function that returns the weight for the edge. 
        abstract weight: edge: EdgeSingular -> float
        /// A boolean indicating whether the directed indegree and outdegree centrality is calculated (true) or
        /// whether the undirected centrality is calculated (false, default).
        abstract directed: bool option with get, set
        /// A boolean indicating whether the algorithm calculates the
        /// harmonic mean (true, default) or the arithmetic mean (false) of distances.
        /// The harmonic mean is very useful for graphs that are not strongly connected.
        abstract harmonic: bool option with get, set

    /// http://js.cytoscape.org/#eles.closenessCentrality
    /// trivial
    /// http://js.cytoscape.org/#eles.closenessCentralityNormalized
    /// http://js.cytoscape.org/#eles.closenessCentralityNormalized
    type [<AllowNullLiteral>] SearchClosenessCentralityNormalizedOptions =
        /// A function that returns the weight for the edge. 
        abstract weight: edge: EdgeSingular -> float
        abstract directed: bool option with get, set
        /// A boolean indicating whether the algorithm calculates the
        /// harmonic mean (true, default) or the arithmetic mean (false) of distances.
        /// The harmonic mean is very useful for graphs that are not strongly connected.
        /// A boolean indicating whether the algorithm calculates the
        /// harmonic mean (true, default) or the arithmetic mean (false) of distances.
        /// The harmonic mean is very useful for graphs that are not strongly connected.
        abstract harmonic: bool option with get, set

    /// http://js.cytoscape.org/#eles.closenessCentralityNormalized
    /// trivial
    /// http://js.cytoscape.org/#eles.betweennessCentrality
    type [<AllowNullLiteral>] SearchBetweennessOptions =
        /// A function that returns the weight for the edge. 
        abstract weight: edge: EdgeSingular -> float
        /// A boolean indicating whether the directed indegree and outdegree centrality is calculated (true) or
        /// whether the undirected centrality is calculated (false, default).
        abstract directed: bool option with get, set

    /// http://js.cytoscape.org/#eles.betweennessCentrality
    type [<AllowNullLiteral>] SearchBetweennessResult =
        /// returns the betweenness centrality of the specified node 
        abstract betweenness: node: NodeSingular -> float
        /// returns the normalised betweenness centrality of the specified node 
        abstract betweennessNormalized: node: NodeSingular -> float
        abstract betweennessNormalised: node: NodeSingular -> float

    /// http://js.cytoscape.org/#eles.closenessCentralityNormalized
    /// trivial
    type [<AllowNullLiteral>] CollectionAlgorithms =
        /// <summary>Perform a breadth-first search within the elements in the collection.</summary>
        /// <param name="options">http://js.cytoscape.org/#eles.breadthFirstSearch</param>
        abstract breadthFirstSearch: options: SearchFirstOptions -> SearchFirstResult
        /// Perform a depth-first search within the elements in the collection.
        /// http://js.cytoscape.org/#eles.depthFirstSearch
        abstract depthFirstSearch: options: SearchFirstOptions -> SearchFirstResult
        /// Perform Dijkstra's algorithm on the elements in the collection.
        /// This finds the shortest paths to all other nodes in the collection from the root node.
        /// http://js.cytoscape.org/#eles.dijkstra
        abstract dijkstra: options: SearchDijkstraOptions -> SearchDijkstraResult
        /// Perform the A* search algorithm on the elements in the collection.
        /// This finds the shortest path from the root node to the goal node.
        /// http://js.cytoscape.org/#eles.aStar
        abstract aStar: options: SearchAStarOptions -> SearchAStarResult
        /// Perform the Floyd Warshall search algorithm on the elements in the collection.
        /// This finds the shortest path between all pairs of nodes.
        /// http://js.cytoscape.org/#eles.floydWarshall
        abstract aStar: options: SearchFloydWarshallOptions -> SearchFloydWarshallResult
        /// Perform the Bellman-Ford search algorithm on the elements in the collection.
        /// This finds the shortest path from the starting node to all other nodes in the collection.
        /// http://js.cytoscape.org/#eles.bellmanFord
        abstract bellmanFord: options: SearchBellmanFordOptions -> SearchBellmanFordResult
        /// Perform Kruskal's algorithm on the elements in the collection,
        /// returning the minimum spanning tree, assuming undirected edges.
        /// http://js.cytoscape.org/#eles.kruskal
        abstract kruskal: handler: (EdgeCollection -> float) -> CollectionReturnValue
        /// Finds the minimum cut in a graph using the Karger-Stein algorithm.
        /// The optimal result is found with a high probability, but without guarantee.
        /// http://js.cytoscape.org/#eles.kargerStein
        abstract kargerStein: unit -> CollectionAlgorithmsKargerSteinReturn
        /// Rank the nodes in the collection using the Page Rank algorithm.
        /// http://js.cytoscape.org/#eles.pageRank
        abstract pageRank: options: SearchPageRankOptions -> SearchPageRankResult
        /// Considering only the elements in the calling collection,
        /// calculate the degree centrality of the specified root node.
        /// http://js.cytoscape.org/#eles.degreeCentrality
        abstract degreeCentrality: options: SearchDegreeCentralityOptions -> U2<SearchDegreeCentralityResultDirected, SearchDegreeCentralityResultUndirected>
        /// Considering only the elements in the calling collection,
        /// calculate the normalised degree centrality of the nodes.
        /// http://js.cytoscape.org/#eles.degreeCentralityNormalized
        abstract degreeCentralityNormalized: options: SearchDegreeCentralityNormalizedOptions -> U2<SearchDegreeCentralityNormalizedResultDirected, SearchDegreeCentralityNormalizedResultUndirected>
        /// Considering only the elements in the calling collection,
        /// calculate the closeness centrality of the specified root node.
        /// http://js.cytoscape.org/#eles.closenessCentrality
        abstract closenessCentrality: options: SearchClosenessCentralityOptions -> float
        /// Considering only the elements in the calling collection,
        /// calculate the closeness centrality of the nodes.
        /// http://js.cytoscape.org/#eles.closenessCentralityNormalized
        abstract closenessCentralityNormalized: options: SearchClosenessCentralityNormalizedOptions -> U2<SearchDegreeCentralityNormalizedResultDirected, SearchDegreeCentralityNormalizedResultUndirected>
        /// Considering only the elements in the calling collection,
        /// calculate the betweenness centrality of the nodes.
        /// http://js.cytoscape.org/#eles.betweennessCentrality
        abstract betweennessCentrality: options: SearchBetweennessOptions -> SearchBetweennessResult

    type [<AllowNullLiteral>] CollectionAlgorithmsKargerSteinReturn =
        abstract cut: EdgeCollection with get, set
        abstract partitionFirst: NodeCollection with get, set
        abstract partitionSecond: NodeCollection with get, set

    /// http://js.cytoscape.org/#collection/compound-nodes
    type [<AllowNullLiteral>] NodeSingularCompound =
        /// Get whether the node is a compound parent
        /// (i.e. a node containing one or more child nodes)
        /// http://js.cytoscape.org/#node.isParent
        abstract isParent: unit -> bool
        /// Get whether the node is childless (i.e. a node with no child nodes)
        /// http://js.cytoscape.org/#node.isChildless
        abstract isChildless: unit -> bool
        /// Get whether the node is a compound child (i.e. contained within a node)
        ///   http://js.cytoscape.org/#node.isChild
        abstract isChild: unit -> bool
        /// Get whether the node is an orphan (i.e. a node with no parent)
        /// http://js.cytoscape.org/#node.isOrphan
        abstract isOrphan: unit -> bool

    /// http://js.cytoscape.org/#collection/compound-nodes
    type [<AllowNullLiteral>] NodeCollectionCompound =
        /// <summary>Get the compound parent node of each node in the collection.</summary>
        /// <param name="selector">A selector used to filter the resultant collection.
        /// http://js.cytoscape.org/#nodes.parent</param>
        abstract parent: ?selector: Selector -> NodeCollection
        /// <summary>Get all compound ancestor nodes
        /// (i.e. parents, parents' parents, etc.) of each node in the collection.</summary>
        /// <param name="selector">A selector used to filter the resultant collection.
        /// http://js.cytoscape.org/#nodes.ancestors</param>
        abstract ancestors: ?selector: Selector -> NodeCollection
        abstract parents: ?selector: Selector -> NodeCollection
        /// <summary>Get all compound ancestors common to all the nodes in the collection,
        /// starting with the closest and getting progressively farther.</summary>
        /// <param name="selector">A selector used to filter the resultant collection.
        /// http://js.cytoscape.org/#nodes.commonAncestors</param>
        abstract commonAncestors: ?selector: Selector -> NodeCollection
        /// <summary>Get all orphan (i.e. has no compound parent) nodes in the calling collection.</summary>
        /// <param name="selector">A selector used to filter the resultant collection.
        /// http://js.cytoscape.org/#nodes.orphans</param>
        abstract orphans: ?selector: Selector -> NodeCollection
        /// <summary>Get all nonorphan (i.e. has a compound parent) nodes in the calling collection.</summary>
        /// <param name="selector">A selector used to filter the resultant collection.
        /// http://js.cytoscape.org/#nodes.nonorphans</param>
        abstract nonorphans: ?selector: Selector -> NodeCollection
        /// <summary>Get all compound child (i.e. direct descendant) nodes of each node in the collection.</summary>
        /// <param name="selector">A selector used to filter the resultant collection.
        /// http://js.cytoscape.org/#nodes.children</param>
        abstract children: ?selector: Selector -> NodeCollection
        /// <summary>Get all compound descendant (i.e. children, children's children, etc.)
        /// nodes of each node in the collection.</summary>
        /// <param name="selector">A selector used to filter the resultant collection.
        /// http://js.cytoscape.org/#nodes.descendants</param>
        abstract descendants: ?selector: Selector -> NodeCollection
        /// <summary>Get all sibling (i.e. same compound parent)
        /// nodes of each node in the collection.</summary>
        /// <param name="selector">A selector used to filter the resultant collection.
        /// http://js.cytoscape.org/#nodes.siblings</param>
        abstract siblings: ?selector: Selector -> NodeCollection

    type Selector =
        string

    type EventNames =
        string

    type [<StringEnum>] [<RequireQualifiedAccess>] SelectionType =
        | Additive
        | Single

    type [<StringEnum>] [<RequireQualifiedAccess>] ElementGroup =
        | Nodes
        | Edges

    type [<StringEnum>] [<RequireQualifiedAccess>] PositionDimension =
        | X
        | Y

    type Scratchpad =
        obj option

    module Css =

        type Colour =
            string

        type [<StringEnum>] [<RequireQualifiedAccess>] NodeShape =
            | Rectangle
            | Roundrectangle
            | Ellipse
            | Triangle
            | Pentagon
            | Hexagon
            | Heptagon
            | Octagon
            | Star
            | Diamond
            | Vee
            | Rhomboid
            | Polygon

        type ShapePolygonPoints =
            string

        type [<StringEnum>] [<RequireQualifiedAccess>] LineStyle =
            | Solid
            | Dotted
            | Dashed
            | Double

        /// http://js.cytoscape.org/#style/node-body
        type [<AllowNullLiteral>] Node =
            //inherit obj  // extends Partial<Overlay>
            inherit PaddingNode
            inherit LabelStyle
            /// The colour of the overlay.
            [<Emit("$0[\"overlay-color\"]{{=$1}}")>]
            abstract ``overlay-color``: Colour option with get, set // extends Partial<Overlay>
            /// The area outside of the element within which the overlay is shown.
            [<Emit("$0[\"overlay-padding\"]{{=$1}}")>]
            abstract ``overlay-padding``: float option with get, set // extends Partial<Overlay>
            /// The opacity of the overlay.
            [<Emit("$0[\"overlay-opacity\"]{{=$1}}")>]
            abstract ``overlay-opacity``: float option with get, set // extends Partial<Overlay>
            abstract label: string option with get, set
            /// The width of the node’s body.
            /// This property can take on the special value label
            /// so the width is automatically based on the node’s label.
            abstract width: U2<float, string> option with get, set
            /// The height of the node’s body.
            /// This property can take on the special value label
            /// so the height is automatically based on the node’s label.
            abstract height: U2<float, string> option with get, set
            /// The shape of the node’s body.
            abstract shape: NodeShape option with get, set
            [<Emit("$0[\"shape-polygon-points\"]{{=$1}}")>]
            abstract ``shape-polygon-points``: ShapePolygonPoints option with get, set
            abstract opacity: float option with get, set
            abstract backgroundColor: Colour option with get, set
            /// The colour of the node’s body.
            [<Emit("$0[\"background-color\"]{{=$1}}")>]
            abstract ``background-color``: Colour option with get, set
            /// Blackens the node’s body for values from 0 to 1;
            /// whitens the node’s body for values from 0 to -1.
            [<Emit("$0[\"background-blacken\"]{{=$1}}")>]
            abstract ``background-blacken``: float option with get, set
            /// The opacity level of the node’s background colour.
            [<Emit("$0[\"background-opacity\"]{{=$1}}")>]
            abstract ``background-opacity``: float option with get, set
            /// The size of the node’s border.
            [<Emit("$0[\"border-width\"]{{=$1}}")>]
            abstract ``border-width``: float option with get, set
            /// The style of the node’s border.
            [<Emit("$0[\"border-style\"]{{=$1}}")>]
            abstract ``border-style``: LineStyle option with get, set
            /// The colour of the node’s border.
            [<Emit("$0[\"border-color\"]{{=$1}}")>]
            abstract ``border-color``: Colour option with get, set
            /// The opacity of the node’s border.
            /// A value between [0 1].
            [<Emit("$0[\"border-opacity\"]{{=$1}}")>]
            abstract ``border-opacity``: float option with get, set
            [<Emit("$0[\"text-opacity\"]{{=$1}}")>]
            abstract ``text-opacity``: float option with get, set

        /// A padding defines an addition to a node’s dimension.
        /// For example, padding-left adds to a node’s outer (i.e. total) width.
        /// This can be used to add spacing around the label of width: label; height: label; nodes,
        /// or it can be used to add spacing between a compound node parent and its children.
        type [<AllowNullLiteral>] PaddingNode =
            [<Emit("$0[\"padding-left\"]{{=$1}}")>]
            abstract ``padding-left``: string option with get, set
            [<Emit("$0[\"padding-right\"]{{=$1}}")>]
            abstract ``padding-right``: string option with get, set
            [<Emit("$0[\"padding-top\"]{{=$1}}")>]
            abstract ``padding-top``: string option with get, set
            [<Emit("$0[\"padding-bottom\"]{{=$1}}")>]
            abstract ``padding-bottom``: string option with get, set

        type [<AllowNullLiteral>] Dictionary =
            [<Emit "$0[$1]{{=$2}}">] abstract Item: key: string -> obj option with get, set

        /// A background image may be applied to a node’s body:
        /// 
        /// http://js.cytoscape.org/#style/background-image
        type [<AllowNullLiteral>] BackgroundImage =
            /// The URL that points to the image that should be used as the node’s background.
            /// PNG, JPG, and SVG are supported formats.
            /// You may use a data URI to use embedded images,
            /// thereby saving a HTTP request.
            [<Emit("$0[\"background-image\"]{{=$1}}")>]
            abstract ``background-image``: string option with get, set
            /// The opacity of the background image. [0 1]
            [<Emit("$0[\"background-image-opacity\"]{{=$1}}")>]
            abstract ``background-image-opacity``: float option with get, set
            /// Specifies the width of the image.
            /// A percent value (e.g. 50%) may be used to set
            /// the image width relative to the node width.
            /// If used in combination with background- fit,
            /// then this value overrides the width of the image
            /// in calculating the fitting — thereby overriding the aspect ratio.
            /// The auto value is used by default, which uses the width of the image.
            [<Emit("$0[\"background-width\"]{{=$1}}")>]
            abstract ``background-width``: U2<float, string> option with get, set
            /// Specifies the height of the image.
            /// A percent value (e.g. 50%) may be used to set the image
            /// height relative to the node height.
            /// If used in combination with background- fit,
            /// then this value overrides the height of the image in calculating
            /// the fitting — thereby overriding the aspect ratio.
            /// The auto value is used by default, which uses the height of the image.
            [<Emit("$0[\"background-height\"]{{=$1}}")>]
            abstract ``background-height``: U2<float, string> option with get, set
            /// How the background image is fit to the node;
            /// may be none for original size,
            /// contain to fit inside node,
            /// or cover to cover the node.
            [<Emit("$0[\"background-fit\"]{{=$1}}")>]
            abstract ``background-fit``: U3<string, string, string> option with get, set
            /// Whether to repeat the background image;
            /// may be no-repeat, repeat-x, repeat-y, or repeat.
            [<Emit("$0[\"background-repeat\"]{{=$1}}")>]
            abstract ``background-repeat``: U4<string, string, string, string> option with get, set
            /// The x position of the background image,
            /// measured in percent(e.g. 50%) or pixels (e.g. 10px).
            [<Emit("$0[\"background-position-x\"]{{=$1}}")>]
            abstract ``background-position-x``: U2<float, string> option with get, set
            /// The y position of the background image,
            /// measured in percent(e.g. 50%) or pixels (e.g. 10px).
            [<Emit("$0[\"background-position-y\"]{{=$1}}")>]
            abstract ``background-position-y``: U2<float, string> option with get, set
            /// How background image clipping is handled;
            /// may be node for clipped to node shape or none for no clipping.
            [<Emit("$0[\"background-clip\"]{{=$1}}")>]
            abstract ``background-clip``: U2<string, string> option with get, set

        /// These properties allow you to create pie chart backgrounds on nodes.
        /// Note that 16 slices maximum are supported per node,
        /// so in the properties 1 <= i <= 16.
        /// Of course, you must specify a numerical value for each property in place of i.
        /// Each nonzero sized slice is placed in order of i,
        /// starting from the 12 o’clock position and working clockwise.
        /// 
        /// You may find it useful to reserve a number to a particular
        /// colour for all nodes in your stylesheet.
        /// Then you can specify values for pie-i-background-size
        /// accordingly for each node via a mapper.
        /// This would allow you to create consistently coloured
        /// pie charts in each node of the graph based on element data.
        /// 
        /// http://js.cytoscape.org/#style/pie-chart-background
        type [<AllowNullLiteral>] PieChartBackground =
            /// The diameter of the pie, measured as a percent of node size (e.g. 100%) or an absolute length (e.g. 25px).
            [<Emit("$0[\"pie-size\"]{{=$1}}")>]
            abstract ``pie-size``: string with get, set
            /// The colour of the node’s ith pie chart slice.
            [<Emit("$0[\"pie-i-background-color\"]{{=$1}}")>]
            abstract ``pie-i-background-color``: Colour with get, set
            /// The size of the node’s ith pie chart slice, measured in percent (e.g. 25% or 25).
            [<Emit("$0[\"pie-i-background-size\"]{{=$1}}")>]
            abstract ``pie-i-background-size``: float with get, set
            /// The opacity of the node’s ith pie chart slice.
            [<Emit("$0[\"pie-i-background-opacity\"]{{=$1}}")>]
            abstract ``pie-i-background-opacity``: float with get, set

        type [<AllowNullLiteral>] Edge =
            inherit EdgeLine
            inherit EdgeArrow
            inherit LabelStyle
            //inherit obj  // extends Partial<Overlay>
            /// The colour of the overlay.
            [<Emit("$0[\"overlay-color\"]{{=$1}}")>]
            abstract ``overlay-color``: Colour option with get, set // extends Partial<Overlay>
            /// The area outside of the element within which the overlay is shown.
            [<Emit("$0[\"overlay-padding\"]{{=$1}}")>]
            abstract ``overlay-padding``: float option with get, set // extends Partial<Overlay>
            /// The opacity of the overlay.
            [<Emit("$0[\"overlay-opacity\"]{{=$1}}")>]
            abstract ``overlay-opacity``: float option with get, set // extends Partial<Overlay>
            /// The text to display for an element’s label.
            abstract label: string option with get, set
            /// The text to display for an edge’s source label.
            [<Emit("$0[\"source-label\"]{{=$1}}")>]
            abstract ``source-label``: string option with get, set
            /// The text to display for an edge’s target label.
            [<Emit("$0[\"target-label\"]{{=$1}}")>]
            abstract ``target-label``: string option with get, set

            

        type [<StringEnum>] [<RequireQualifiedAccess>] CurveStyle =
            | Haystack
            | Bezier
            | Unbundled
            | Segments

        /// These properties affect the styling of an edge’s line:
        /// 
        /// http://js.cytoscape.org/#style/edge-line
        type [<AllowNullLiteral>] EdgeLine =
            /// The width of an edge’s line.
            abstract width: U2<float, string> option with get, set
            /// The curving method used to separate two or more edges between two nodes;
            /// may be
            ///   - haystack (default, very fast, bundled straight edges for which loops and compounds are unsupported),
            ///   - bezier(bundled curved edges),
            ///   - unbundled - bezier(curved edges for use with manual control points), or
            ///   - segments (a series of straight lines).
            /// Note that haystack edges work best with ellipse, rectangle, or similar nodes.
            /// Smaller node shapes, like triangle, will not be as aesthetically pleasing.
            /// Also note that edge arrows are unsupported for haystack edges.
            [<Emit("$0[\"curve-style\"]{{=$1}}")>]
            abstract ``curve-style``: CurveStyle option with get, set
            /// The colour of the edge’s line.
            [<Emit("$0[\"line-color\"]{{=$1}}")>]
            abstract ``line-color``: Colour option with get, set
            /// The style of the edge’s line.
            [<Emit("$0[\"line-style\"]{{=$1}}")>]
            abstract ``line-style``: LineStyle option with get, set

        /// For automatic, bundled bezier edges (curve - style: bezier):
        /// 
        /// http://js.cytoscape.org/#style/bezier-edges
        type [<AllowNullLiteral>] BezierEdges =
            /// From the line perpendicular from source to target,
            /// this value specifies the distance between successive bezier edges.
            [<Emit("$0[\"control-point-step-size\"]{{=$1}}")>]
            abstract ``control-point-step-size``: float with get, set
            /// A single value that overrides "control-point-step-size" with a manual value.
            /// Because it overrides the step size, bezier edges with the same value will overlap.
            /// Thus, it’s best to use this as a one- off value for particular edges if need be.
            [<Emit("$0[\"control-point-distance\"]{{=$1}}")>]
            abstract ``control-point-distance``: float with get, set
            /// A single value that weights control points along the line from source to target.
            /// The value usually ranges on [0, 1], with
            /// 0 towards the source node and
            /// 1 towards the target node —
            /// but larger or smaller values can also be used.
            [<Emit("$0[\"control-point-weight\"]{{=$1}}")>]
            abstract ``control-point-weight``: float with get, set
            /// With value intersection (default),
            /// the line from source to target for "control-point-weight" is
            /// from the outside of the source node’s shape to the outside of
            /// the target node’s shape.With value node- position,
            /// the line is from the source position to the target position.
            /// The "node-position" option makes calculating edge points easier
            /// — but it should be used carefully because you can create invalid
            /// points that intersection would have automatically corrected.
            [<Emit("$0[\"edge-distances\"]{{=$1}}")>]
            abstract ``edge-distances``: float with get, set

        /// Unbundled bezier edges
        /// For bezier edges with manual control points (curve - style: unbundled - bezier):
        /// 
        /// http://js.cytoscape.org/#style/unbundled-bezier-edges
        type [<AllowNullLiteral>] UnbundledBezierEdges =
            /// A series of values that specify for each control point the
            /// distance perpendicular to a line formed
            /// from source to target, e.g. -20 20 - 20.
            [<Emit("$0[\"control-point-distances\"]{{=$1}}")>]
            abstract ``control-point-distances``: string with get, set
            /// A series of values that weights control points along
            /// a line from source to target, e.g. 0.25 0.5 0.75.
            /// A value usually ranges on [0, 1], with
            /// 0 towards the source node and
            /// 1 towards the target node
            /// — but larger or smaller values can also be used.
            [<Emit("$0[\"control-point-weights\"]{{=$1}}")>]
            abstract ``control-point-weights``: string with get, set
            /// With value intersection (default),
            /// the line from source to target for "control-point-weights"
            /// is from the outside of the source node’s shape to the
            /// outside of the target node’s shape.
            /// With value
            /// "node-position", the line is from the source position to the target position.
            /// The "node-position" option makes calculating edge points easier
            /// — but it should be used carefully because you can create
            /// invalid points that intersection would have automatically corrected.
            [<Emit("$0[\"edge-distances\"]{{=$1}}")>]
            abstract ``edge-distances``: float with get, set

        /// Haystack edges
        /// Loop edges and compound parent nodes are not supported by haystack edges.
        /// Haystack edges are a more performant replacement for plain, straight line edges.
        /// 
        /// For fast, straight line edges (curve - style: haystack):
        /// http://js.cytoscape.org/#style/haystack-edges
        type [<AllowNullLiteral>] HaystackEdges =
            /// A value between 0 and 1 inclusive that indicates the relative radius used to position haystack edges on their connected nodes.
            /// The outside of the node is at 1, and the centre of the node is at 0.
            [<Emit("$0[\"haystack-radius\"]{{=$1}}")>]
            abstract ``haystack-radius``: float with get, set

        /// Segments edges
        /// For edges made of several straight lines (curve - style: segments):
        /// http://js.cytoscape.org/#style/segments-edges
        type [<AllowNullLiteral>] SegmentsEdges =
            /// A series of values that specify for each segment point the distance perpendicular to a line formed from source to target, e.g. -20 20 - 20.
            [<Emit("$0[\"segment-distances\"]{{=$1}}")>]
            abstract ``segment-distances``: string with get, set
            /// A series of values that weights segment points along a line from source to target,
            /// e.g. 0.25 0.5 0.75.A value usually ranges on [0, 1],
            /// with 0 towards the source node and 1 towards the target node — but larger or smaller values can also be used.
            [<Emit("$0[\"segment-weights\"]{{=$1}}")>]
            abstract ``segment-weights``: string with get, set
            /// With value
            ///   * "intersection" (default), the line from source to target
            ///   * for "segment-weights" is from the outside of the source node’s shape to the outside of the target node’s shape.
            ///   * With value "node-position", the line is from the source position to the target position.
            /// The "node-position" option makes calculating edge points easier
            /// — but it should be used carefully because you can create
            /// invalid points that intersection would have automatically corrected.
            [<Emit("$0[\"edge-distances\"]{{=$1}}")>]
            abstract ``edge-distances``: U3<string, string, string> with get, set

        type [<StringEnum>] [<RequireQualifiedAccess>] ArrowShape =
            | Tee
            | Triangle
            | [<CompiledName "triangle-tee">] TriangleTee
            | [<CompiledName "triangle-backcurve">] TriangleBackcurve
            | Square
            | Circle
            | Diamond
            | None

        type [<StringEnum>] [<RequireQualifiedAccess>] ArrowFill =
            | Filled
            | Hollow

        /// Edge arrow
        ///   * <pos>-arrow-color : The colour of the edge’s source arrow.
        ///   * <pos>-arrow-shape : The shape of the edge’s source arrow.
        ///   * <pos>-arrow-fill : The fill state of the edge’s source arrow.
        /// 
        /// For each edge arrow property above, replace <pos> with one of
        ///   * source : Pointing towards the source node, at the end of the edge.
        ///   * mid-source : Pointing towards the source node, at the middle of the edge.
        ///   * target : Pointing towards the target node, at the end of the edge.
        ///   * mid-target: Pointing towards the target node, at the middle of the edge.
        /// 
        /// Only mid arrows are supported on haystack edges.
        /// http://js.cytoscape.org/#style/edge-arrow
        type [<AllowNullLiteral>] EdgeArrow =
            /// The colour of the edge’s source arrow. 
            [<Emit("$0[\"source-arrow-color\"]{{=$1}}")>]
            abstract ``source-arrow-color``: Colour option with get, set
            /// The colour of the edge’s "mid-source" arrow. 
            [<Emit("$0[\"mid-source-arrow-color\"]{{=$1}}")>]
            abstract ``mid-source-arrow-color``: Colour option with get, set
            /// The colour of the edge’s target arrow. 
            [<Emit("$0[\"target-arrow-color\"]{{=$1}}")>]
            abstract ``target-arrow-color``: Colour option with get, set
            /// The colour of the edge’s "mid-target" arrow. 
            [<Emit("$0[\"mid-target-arrow-color\"]{{=$1}}")>]
            abstract ``mid-target-arrow-color``: Colour option with get, set
            /// The shape of the edge’s source arrow. 
            [<Emit("$0[\"source-arrow-shape\"]{{=$1}}")>]
            abstract ``source-arrow-shape``: ArrowShape option with get, set
            /// The shape of the edge’s mid-source arrow. 
            [<Emit("$0[\"mid-source-arrow-shape\"]{{=$1}}")>]
            abstract ``mid-source-arrow-shape``: ArrowShape option with get, set
            /// The shape of the edge’s target arrow.
            [<Emit("$0[\"target-arrow-shape\"]{{=$1}}")>]
            abstract ``target-arrow-shape``: ArrowShape option with get, set
            /// The shape of the edge’s mid-target arrow. 
            [<Emit("$0[\"mid-target-arrow-shape\"]{{=$1}}")>]
            abstract ``mid-target-arrow-shape``: ArrowShape option with get, set
            /// The fill state of the edge’s source arrow. 
            [<Emit("$0[\"source-arrow-fill\"]{{=$1}}")>]
            abstract ``source-arrow-fill``: ArrowFill option with get, set
            /// The fill state of the edge’s mid-source arrow. 
            [<Emit("$0[\"mid-source-arrow-fill\"]{{=$1}}")>]
            abstract ``mid-source-arrow-fill``: ArrowFill option with get, set
            /// The fill state of the edge’s target arrow. 
            [<Emit("$0[\"target-arrow-fill\"]{{=$1}}")>]
            abstract ``target-arrow-fill``: ArrowFill option with get, set
            /// The fill state of the edge’s mid-target arrow. 
            [<Emit("$0[\"mid-target-arrow-fill\"]{{=$1}}")>]
            abstract ``mid-target-arrow-fill``: ArrowFill option with get, set
            /// Scaling for the arrow size; may be any number >= 0
            [<Emit("$0[\"arrow-scale\"]{{=$1}}")>]
            abstract ``arrow-scale``: float option with get, set

        /// http://js.cytoscape.org/#style/visibility
        type [<AllowNullLiteral>] Visibility =
            /// Whether to display the element; may be element for displayed or none for not displayed.
            /// Note that a "display: none" bezier edge does not take up space in its bundle.
            abstract display: U2<string, string> with get, set
            /// Whether the element is visible; may be visible or hidden.
            /// Note that a "visibility : hidden" bezier edge still takes up space in its bundle.
            abstract visibility: U2<string, string> with get, set
            /// The opacity of the element, ranging from 0 to 1.
            /// Note that the opacity of a compound node parent affects the effective opacity of its children.
            abstract opacity: float with get, set
            /// An integer value that affects the relative draw order of elements.
            /// In general, an element with a higher "z-index" will be drawn on top of an element with a lower "z-index".
            /// Note that edges are under nodes despite "z-index", except when necessary for compound nodes.
            [<Emit("$0[\"z-index\"]{{=$1}}")>]
            abstract ``z-index``: float with get, set

        type [<StringEnum>] [<RequireQualifiedAccess>] FontStyle =
            | Normal
            | Italic
            | Oblique

        type FontWeight =
            U5<float, string, string, string, string>

        [<RequireQualifiedAccess; CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]
        module FontWeight =
            let ofFloat v: FontWeight = v |> U5.Case1
            let isFloat (v: FontWeight) = match v with U5.Case1 _ -> true | _ -> false
            let asFloat (v: FontWeight) = match v with U5.Case1 o -> Some o | _ -> None
            let ofCase2 v: FontWeight = v |> U5.Case2
            let isCase2 (v: FontWeight) = match v with U5.Case2 _ -> true | _ -> false
            let asCase2 (v: FontWeight) = match v with U5.Case2 o -> Some o | _ -> None
            let ofCase3 v: FontWeight = v |> U5.Case3
            let isCase3 (v: FontWeight) = match v with U5.Case3 _ -> true | _ -> false
            let asCase3 (v: FontWeight) = match v with U5.Case3 o -> Some o | _ -> None
            let ofCase4 v: FontWeight = v |> U5.Case4
            let isCase4 (v: FontWeight) = match v with U5.Case4 _ -> true | _ -> false
            let asCase4 (v: FontWeight) = match v with U5.Case4 o -> Some o | _ -> None
            let ofCase5 v: FontWeight = v |> U5.Case5
            let isCase5 (v: FontWeight) = match v with U5.Case5 _ -> true | _ -> false
            let asCase5 (v: FontWeight) = match v with U5.Case5 o -> Some o | _ -> None

        type [<StringEnum>] [<RequireQualifiedAccess>] TextTranformation =
            | None
            | Uppercase
            | Lowercase

        type [<StringEnum>] [<RequireQualifiedAccess>] TextWrap =
            | None
            | Wrap

        type [<StringEnum>] [<RequireQualifiedAccess>] TextHAlign =
            | Left
            | Center
            | Right

        type [<StringEnum>] [<RequireQualifiedAccess>] TextVAlign =
            | Top
            | Center
            | Bottom

        /// Labels
        /// Label text:
        /// 
        /// http://js.cytoscape.org/#style/labels
        type [<AllowNullLiteral>] LabelStyle =
            /// Basic font styling:
            /// The colour of the element’s label.
            abstract color: Colour option with get, set
            /// The opacity of the label text, including its outline.
            [<Emit("$0[\"text-opacity\"]{{=$1}}")>]
            abstract ``text-opacity``: float option with get, set
            /// A comma-separated list of font names to use on the label text.
            [<Emit("$0[\"font-family\"]{{=$1}}")>]
            abstract ``font-family``: string option with get, set
            /// The size of the label text.
            /// https://developer.mozilla.org/en-US/docs/Web/CSS/font-family
            [<Emit("$0[\"font-size\"]{{=$1}}")>]
            abstract ``font-size``: float option with get, set
            /// A CSS font style to be applied to the label text.
            /// https://developer.mozilla.org/en-US/docs/Web/CSS/font-style
            [<Emit("$0[\"font-style\"]{{=$1}}")>]
            abstract ``font-style``: FontStyle option with get, set
            /// A CSS font weight to be applied to the label text.
            [<Emit("$0[\"font-weight\"]{{=$1}}")>]
            abstract ``font-weight``: FontWeight option with get, set
            /// A transformation to apply to the label text.
            [<Emit("$0[\"text-transform\"]{{=$1}}")>]
            abstract ``text-transform``: TextTranformation option with get, set
            /// Wrapping text:
            /// A wrapping style to apply to the label text; may be
            ///   * "none" for no wrapping (including manual newlines ) or
            ///   * "wrap" for manual and/ or autowrapping.
            [<Emit("$0[\"text-wrap\"]{{=$1}}")>]
            abstract ``text-wrap``: TextWrap option with get, set
            /// The maximum width for wrapped text,
            /// applied when "text-wrap" is set to wrap.
            /// For only manual newlines (i.e.\n), set a very large
            /// value like 1000px such that only your newline characters would apply.
            [<Emit("$0[\"text-max-width\"]{{=$1}}")>]
            abstract ``text-max-width``: string option with get, set
            /// Node label alignment:
            /// The vertical alignment of a node’s label.
            [<Emit("$0[\"text-halign\"]{{=$1}}")>]
            abstract ``text-halign``: TextHAlign option with get, set
            /// The vertical alignment of a node’s label.
            [<Emit("$0[\"text-valign\"]{{=$1}}")>]
            abstract ``text-valign``: TextVAlign option with get, set
            /// Edge label alignment:
            /// For the source label of an edge, how far from the source node the label should be placed.
            [<Emit("$0[\"source-text-offset\"]{{=$1}}")>]
            abstract ``source-text-offset``: float option with get, set
            /// For the target label of an edge, how far from the target node the label should be placed.
            [<Emit("$0[\"target-text-offset\"]{{=$1}}")>]
            abstract ``target-text-offset``: float option with get, set
            /// Margins:
            /// A margin that shifts the label along the x- axis.
            [<Emit("$0[\"text-margin-x\"]{{=$1}}")>]
            abstract ``text-margin-x``: float option with get, set
            /// A margin that shifts the label along the y- axis.
            [<Emit("$0[\"text-margin-y\"]{{=$1}}")>]
            abstract ``text-margin-y``: float option with get, set
            /// (For the source label of an edge.)
            [<Emit("$0[\"source-text-margin-x\"]{{=$1}}")>]
            abstract ``source-text-margin-x``: float option with get, set
            /// (For the source label of an edge.)
            [<Emit("$0[\"source-text-margin-y\"]{{=$1}}")>]
            abstract ``source-text-margin-y``: float option with get, set
            /// (For the target label of an edge.)
            [<Emit("$0[\"target-text-margin-x\"]{{=$1}}")>]
            abstract ``target-text-margin-x``: float option with get, set
            /// (For the target label of an edge.)
            [<Emit("$0[\"target-text-margin-y\"]{{=$1}}")>]
            abstract ``target-text-margin-y``: float option with get, set
            /// Rotating text:
            /// A rotation angle that is applied to the label.
            ///   * For edges, the special value autorotate can be used to align the label to the edge.
            ///   * For nodes, the label is rotated along its anchor point on the node, so a label margin may help for some usecases.
            ///   * The special value none can be used to denote 0deg.
            ///   * Rotations works best with left- to - right text.
            [<Emit("$0[\"text-rotation\"]{{=$1}}")>]
            abstract ``text-rotation``: float option with get, set
            /// (For the source label of an edge.)
            [<Emit("$0[\"source-text-rotation\"]{{=$1}}")>]
            abstract ``source-text-rotation``: float option with get, set
            /// (For the target label of an edge.)
            [<Emit("$0[\"target-text-rotation\"]{{=$1}}")>]
            abstract ``target-text-rotation``: float option with get, set
            /// Outline:
            /// The colour of the outline around the element’s label text.
            [<Emit("$0[\"text-outline-color\"]{{=$1}}")>]
            abstract ``text-outline-color``: Colour option with get, set
            /// The opacity of the outline on label text.
            [<Emit("$0[\"text-outline-opacity\"]{{=$1}}")>]
            abstract ``text-outline-opacity``: float option with get, set
            /// The size of the outline on label text.
            [<Emit("$0[\"text-outline-width\"]{{=$1}}")>]
            abstract ``text-outline-width``: float option with get, set
            /// Shadow:
            /// The shadow blur distance.
            [<Emit("$0[\"text-shadow-blur\"]{{=$1}}")>]
            abstract ``text-shadow-blur``: float option with get, set
            /// The colour of the shadow.
            [<Emit("$0[\"text-shadow-color\"]{{=$1}}")>]
            abstract ``text-shadow-color``: Colour option with get, set
            /// The x offset relative to the text where the shadow will be displayed, can be negative.
            /// If you set blur to 0, add an offset to view your shadow.
            [<Emit("$0[\"text-shadow-offset-x\"]{{=$1}}")>]
            abstract ``text-shadow-offset-x``: float option with get, set
            /// The y offset relative to the text where the shadow will be displayed, can be negative.
            /// If you set blur to 0, add an offset to view your shadow.
            [<Emit("$0[\"text-shadow-offset-y\"]{{=$1}}")>]
            abstract ``text-shadow-offset-y``: float option with get, set
            /// The opacity of the shadow on the text; the shadow is disabled for 0 (default value).
            [<Emit("$0[\"text-shadow-opacity\"]{{=$1}}")>]
            abstract ``text-shadow-opacity``: float option with get, set
            /// Background:
            /// A colour to apply on the text background.
            [<Emit("$0[\"text-background-color\"]{{=$1}}")>]
            abstract ``text-background-color``: Colour option with get, set
            /// The opacity of the label background; the background is disabled for 0 (default value).
            [<Emit("$0[\"text-background-opacity\"]{{=$1}}")>]
            abstract ``text-background-opacity``: float option with get, set
            /// The shape to use for the label background.
            [<Emit("$0[\"text-background-shape\"]{{=$1}}")>]
            abstract ``text-background-shape``: U2<string, string> option with get, set
            /// Border:
            /// The width of the border around the label; the border is disabled for 0 (default value).
            [<Emit("$0[\"text-border-opacity\"]{{=$1}}")>]
            abstract ``text-border-opacity``: float option with get, set
            /// The width of the border around the label.
            [<Emit("$0[\"text-border-width\"]{{=$1}}")>]
            abstract ``text-border-width``: float option with get, set
            /// The style of the border around the label.
            [<Emit("$0[\"text-border-style\"]{{=$1}}")>]
            abstract ``text-border-style``: LineStyle option with get, set
            /// The colour of the border around the label.
            [<Emit("$0[\"text-border-color\"]{{=$1}}")>]
            abstract ``text-border-color``: Colour option with get, set
            /// Interactivity:
            /// If zooming makes the effective font size of the label smaller than this,
            /// then no label is shown.Note that because of performance optimisations,
            /// the label may be shown at font sizes slightly smaller than this value.
            /// 
            /// This effect is more pronounced at larger screen pixel ratios.However,
            /// it is guaranteed that the label will be shown at sizes equal to or greater than the value specified.
            [<Emit("$0[\"min-zoomed-font-size\"]{{=$1}}")>]
            abstract ``min-zoomed-font-size``: float option with get, set
            /// Whether events should occur on an element if the label receives an event.
            /// You may want a style applied to the text onactive so you know the text is activatable.
            [<Emit("$0[\"text-events\"]{{=$1}}")>]
            abstract ``text-events``: U2<string, string> option with get, set

        /// http://js.cytoscape.org/#style/events
        type [<AllowNullLiteral>] Events =
            /// Whether events should occur on an element (e.g.tap, mouseover, etc.).
            ///   * For "no", the element receives no events and events simply pass through to the core/viewport.
            abstract events: U2<string, string> with get, set
            /// Whether events should occur on an element if the label receives an event.
            /// You may want a style applied to the text on active so you know the text is activatable.
            [<Emit("$0[\"text-events\"]{{=$1}}")>]
            abstract ``text-events``: U2<string, string> with get, set

        /// These properties allow for the creation of overlays on top of nodes or edges,
        /// and are often used in the :active state.
        /// http://js.cytoscape.org/#style/overlay
        type [<AllowNullLiteral>] Overlay =
            /// The colour of the overlay.
            [<Emit("$0[\"overlay-color\"]{{=$1}}")>]
            abstract ``overlay-color``: Colour with get, set
            /// The area outside of the element within which the overlay is shown.
            [<Emit("$0[\"overlay-padding\"]{{=$1}}")>]
            abstract ``overlay-padding``: float with get, set
            /// The opacity of the overlay.
            [<Emit("$0[\"overlay-opacity\"]{{=$1}}")>]
            abstract ``overlay-opacity``: float with get, set

        /// These properties allow for the creation of shadows on nodes or edges.
        /// Note that shadow-blur could seriously impact performance on large graph.
        /// http://js.cytoscape.org/#style/shadow
        type [<AllowNullLiteral>] Shadow =
            /// The shadow blur, note that if greater than 0, this could impact performance.
            [<Emit("$0[\"shadow-blur\"]{{=$1}}")>]
            abstract ``shadow-blur``: float with get, set
            /// The colour of the shadow.
            [<Emit("$0[\"shadow-color\"]{{=$1}}")>]
            abstract ``shadow-color``: Colour with get, set
            /// The x offset relative to the node/edge where the shadow will be displayed, can be negative. If you set blur to 0, add an offset to view your shadow.
            [<Emit("$0[\"shadow-offset-x\"]{{=$1}}")>]
            abstract ``shadow-offset-x``: float with get, set
            /// The y offset relative to the node/edge where the shadow will be displayed, can be negative. If you set blur to 0, add an offset to view your shadow.
            [<Emit("$0[\"shadow-offset-y\"]{{=$1}}")>]
            abstract ``shadow-offset-y``: float with get, set
            /// The opacity of the shadow.
            [<Emit("$0[\"shadow-opacity\"]{{=$1}}")>]
            abstract ``shadow-opacity``: float with get, set

        type [<StringEnum>] [<RequireQualifiedAccess>] TransitionTimingFunction =
            | Linear
            | Spring
            | [<CompiledName "cubic-bezier">] CubicBezier
            | Ease
            | [<CompiledName "ease-in">] EaseIn
            | [<CompiledName "ease-out">] EaseOut
            | [<CompiledName "ease-in-out">] EaseInOut
            | [<CompiledName "ease-in-sine">] EaseInSine
            | [<CompiledName "ease-out-sine">] EaseOutSine
            | [<CompiledName "ease-in-out-sine">] EaseInOutSine
            | [<CompiledName "ease-in-quad">] EaseInQuad
            | [<CompiledName "ease-out-quad">] EaseOutQuad
            | [<CompiledName "ease-in-out-quad">] EaseInOutQuad
            | [<CompiledName "ease-in-cubic">] EaseInCubic
            | [<CompiledName "ease-out-cubic">] EaseOutCubic
            | [<CompiledName "ease-in-out-cubic">] EaseInOutCubic
            | [<CompiledName "ease-in-quart">] EaseInQuart
            | [<CompiledName "ease-out-quart">] EaseOutQuart
            | [<CompiledName "ease-in-out-quart">] EaseInOutQuart
            | [<CompiledName "ease-in-quint">] EaseInQuint
            | [<CompiledName "ease-out-quint">] EaseOutQuint
            | [<CompiledName "ease-in-out-quint">] EaseInOutQuint
            | [<CompiledName "ease-in-expo">] EaseInExpo
            | [<CompiledName "ease-out-expo">] EaseOutExpo
            | [<CompiledName "ease-in-out-expo">] EaseInOutExpo
            | [<CompiledName "ease-in-circ">] EaseInCirc
            | [<CompiledName "ease-out-circ">] EaseOutCirc
            | [<CompiledName "ease-in-out-circ">] EaseInOutCirc

        /// http://js.cytoscape.org/#style/transition-animation
        type [<AllowNullLiteral>] TransitionAnimation =
            /// A comma separated list of style properties to animate in this state.
            [<Emit("$0[\"transition-property\"]{{=$1}}")>]
            abstract ``transition-property``: string with get, set
            /// The length of the transition in seconds(e.g. 0.5s).
            [<Emit("$0[\"transition-duration\"]{{=$1}}")>]
            abstract ``transition-duration``: float with get, set
            /// The length of the delay in seconds before the transition occurs (e.g. 250ms).
            [<Emit("$0[\"transition-delay\"]{{=$1}}")>]
            abstract ``transition-delay``: float with get, set
            /// An easing function that controls the animation progress curve (a visualisation of easings serves as a reference).
            [<Emit("$0[\"transition-timing-function\"]{{=$1}}")>]
            abstract ``transition-timing-function``: TransitionTimingFunction with get, set

        /// Core
        /// These properties affect UI global to the graph, and apply only to the core.
        /// You can use the special core selector string to set these properties.
        /// http://js.cytoscape.org/#style/core
        type [<AllowNullLiteral>] Core =
            /// Indicator:
            /// The colour of the indicator shown when the background is grabbed by the user.
            [<Emit("$0[\"active-bg-color\"]{{=$1}}")>]
            abstract ``active-bg-color``: Colour with get, set
            /// The opacity of the active background indicator.
            [<Emit("$0[\"active-bg-opacity\"]{{=$1}}")>]
            abstract ``active-bg-opacity``: float with get, set
            /// The size of the active background indicator.
            [<Emit("$0[\"active-bg-size\"]{{=$1}}")>]
            abstract ``active-bg-size``: float with get, set
            /// Selection box:
            /// The background colour of the selection box used for drag selection.
            [<Emit("$0[\"selection-box-color\"]{{=$1}}")>]
            abstract ``selection-box-color``: Colour with get, set
            /// The colour of the border on the selection box.
            [<Emit("$0[\"selection-box-border-color\"]{{=$1}}")>]
            abstract ``selection-box-border-color``: Colour with get, set
            /// The size of the border on the selection box.
            [<Emit("$0[\"selection-box-border-width\"]{{=$1}}")>]
            abstract ``selection-box-border-width``: float with get, set
            /// The opacity of the selection box.
            [<Emit("$0[\"selection-box-opacity\"]{{=$1}}")>]
            abstract ``selection-box-opacity``: float with get, set
            /// Texture during viewport gestures:
            /// The colour of the area outside the viewport texture when initOptions.textureOnViewport === true.
            [<Emit("$0[\"outside-texture-bg-color\"]{{=$1}}")>]
            abstract ``outside-texture-bg-color``: Colour with get, set
            /// The opacity of the area outside the viewport texture.
            [<Emit("$0[\"outside-texture-bg-opacity\"]{{=$1}}")>]
            abstract ``outside-texture-bg-opacity``: float with get, set

    /// Events passed to handler callbacks are similar to
    /// jQuery event objects in that they wrap native event objects,
    /// mimicking their API.
    /// 
    /// http://js.cytoscape.org/#events
    type [<AllowNullLiteral>] EventObject =
        inherit InputEventObject
        inherit LayoutEventObject

    /// http://js.cytoscape.org/#events/event-object
    type [<AllowNullLiteral>] AbstractEventObject =
        /// a reference to the corresponding core Core 
        abstract cy: Core with get, set
        /// indicates the element or core that first caused the event 
        abstract target: obj option with get, set
        /// the event type string (e.g. "tap") 
        [<Emit("$0[\"type\"]{{=$1}}")>]
        abstract ``type``: U2<UserInputDeviceEventName, UserInputDeviceEventNameExt> with get, set
        /// the event namespace string (e.g. "foo" for "foo.tap") 
        [<Emit("$0[\"namespace\"]{{=$1}}")>]
        abstract ``namespace``: string with get, set
        /// Unix epoch time of event in milliseconds 
        abstract timeStamp: float with get, set

    type [<AllowNullLiteral>] InputEventObject =
        inherit AbstractEventObject
        /// position : indicates the model position of the event 
        abstract position: Position with get, set
        /// renderedPosition : indicates the rendered position of the event 
        abstract renderedPosition: Position with get, set
        /// originalEvent : the original user input device event object 
        abstract originalEvent: EventObject with get, set

    type [<AllowNullLiteral>] LayoutEventObject =
        inherit AbstractEventObject
        /// layout : indicates the corresponding layout that triggered the event
        /// (useful if running multiple layouts simultaneously)
        abstract layout: obj option with get, set

    type [<StringEnum>] [<RequireQualifiedAccess>] UserInputDeviceEventName =
        | Mousedown
        | Mouseup
        | Click
        | Mouseover
        | Mouseout
        | Mousemove
        | Touchstart
        | Touchmove
        | Touchend

    type [<StringEnum>] [<RequireQualifiedAccess>] UserInputDeviceEventNameExt =
        | Tapstart
        | Vmousedown
        | Tapdrag
        | Vmousemove
        | Tapdragover
        | Tapdragout
        | Tapend
        | Vmouseup
        | Tap
        | Vclick
        | Taphold
        | Cxttapstart
        | Cxttapend
        | Cxttap
        | Cxtdrag
        | Cxtdragover
        | Cxtdragout
        | Boxstart
        | Boxend
        | Boxselect
        | Box

    type [<StringEnum>] [<RequireQualifiedAccess>] CollectionEventName =
        | Add
        | Remove
        | Select
        | Unselect
        | Lock
        | Unlock
        | Grabon
        | Grab
        | Drag
        | Free
        | Position
        | Data
        | Scratch
        | Style

    type [<StringEnum>] [<RequireQualifiedAccess>] GraphEventName =
        | Layoutstart
        | Layoutready
        | Layoutstop
        | Ready
        | Destroy
        | Render
        | Pan
        | Zoom
        | Resize

    /// Layouts
    /// http://js.cytoscape.org/#layouts
    /// 
    /// The function of a layout is to set the positions on the nodes in the graph.
    /// Layouts are extensions of Cytoscape.js such that it is possible for
    /// anyone to write a layout without modifying the library itself.
    /// Several layouts are included with Cytoscape.js by default,
    /// and their options are described in the sections that follow
    /// with the default values specified.
    /// Note that you must set options.name to the name of the
    /// layout to specify which one you want to run.
    /// Each layout has its own algorithm for setting the position for each node.
    /// This algorithm influences the overall shape of the graph and the lengths of the edges.
    /// A layout’s algorithm can be customised by setting its options.
    /// Therefore, edge lengths can be controlled by setting the layout options appropriately.
    /// For force-directed (physics) layouts,
    /// there is generally an option to set a weight to each edge
    /// to affect the relative edge lengths.
    /// Edge length can also be affected by options like spacing
    /// factors, angles, and overlap avoidance.
    /// Setting edge length depends on the particular layout,
    /// and some layouts will allow for more precise edge lengths than others.
    type [<AllowNullLiteral>] Layouts =
        inherit LayoutManipulation
        inherit LayoutEvents

    type [<AllowNullLiteral>] LayoutOptions = interface end

    type [<AllowNullLiteral>] LayoutHandler =
        [<Emit "$0($1...)">] abstract Invoke: e: LayoutEventObject -> unit

    type [<AllowNullLiteral>] BaseLayoutOptions =
        inherit LayoutOptions
        abstract name: string with get, set
        abstract ready: LayoutHandler option with get, set
        abstract stop: LayoutHandler option with get, set

    /// http://js.cytoscape.org/#layouts/null
    type [<AllowNullLiteral>] NullLayoutOptions =
        inherit LayoutOptions
        abstract name: string with get, set

    type [<AllowNullLiteral>] BoundingBox12 =
        abstract x1: float with get, set
        abstract y1: float with get, set
        abstract x2: float with get, set
        abstract y2: float with get, set

    type [<AllowNullLiteral>] BoundingBoxWH =
        abstract x1: float with get, set
        abstract y1: float with get, set
        abstract w: float with get, set
        abstract h: float with get, set

    type [<AllowNullLiteral>] AnimatedLayoutOptions =
        inherit LayoutOptions
        abstract animate: bool option with get, set
        abstract animationDuration: float option with get, set
        abstract animationEasing: bool option with get, set

    /// http://js.cytoscape.org/#layouts/random
    type [<AllowNullLiteral>] RandomLayoutOptions =
        inherit LayoutOptions
        inherit BaseLayoutOptions
        inherit AnimatedLayoutOptions
        abstract name: string with get, set
        abstract fit: bool with get, set
        abstract padding: float option with get, set
        abstract boundingBox: U2<BoundingBox12, BoundingBoxWH> option with get, set

    /// http://js.cytoscape.org/#layouts/preset
    type [<AllowNullLiteral>] NodePositionMap =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: nodeid: string -> Position with get, set

    type [<AllowNullLiteral>] NodePositionFunction =
        [<Emit "$0($1...)">] abstract Invoke: nodeid: string -> Position

    type [<AllowNullLiteral>] PresetLayoutOptions =
        inherit LayoutOptions
        inherit BaseLayoutOptions
        inherit AnimatedLayoutOptions
        abstract name: string with get, set
        abstract positions: U2<NodePositionMap, NodePositionFunction> option with get, set
        abstract zoom: float option with get, set
        abstract pan: float option with get, set
        abstract fit: bool option with get, set
        abstract padding: float option with get, set

    type [<AllowNullLiteral>] SortableNode =
        abstract data: TypeLiteral_02 with get, set

    type [<AllowNullLiteral>] SortingFunction =
        [<Emit "$0($1...)">] abstract Invoke: a: SortableNode * b: SortableNode -> float

    type [<AllowNullLiteral>] ShapedLayoutOptions =
        inherit LayoutOptions
        inherit BaseLayoutOptions
        inherit AnimatedLayoutOptions
        abstract fit: bool with get, set
        abstract padding: float option with get, set
        abstract boundingBox: U2<BoundingBox12, BoundingBoxWH> option with get, set
        abstract avoidOverlap: bool option with get, set
        abstract nodeDimensionsIncludeLabels: bool with get, set
        abstract spacingFactor: float option with get, set
        abstract sort: SortingFunction option with get, set

    /// http://js.cytoscape.org/#layouts/grid
    type [<AllowNullLiteral>] GridLayoutOptions =
        inherit LayoutOptions
        inherit ShapedLayoutOptions
        abstract name: string with get, set
        abstract avoidOverlapPadding: float option with get, set
        abstract condense: bool with get, set
        abstract rows: float option with get, set
        abstract cols: float option with get, set
        abstract position: nodeid: string -> GridLayoutOptionsPositionReturn

    type [<AllowNullLiteral>] GridLayoutOptionsPositionReturn =
        abstract row: float with get, set
        abstract col: float with get, set

    /// http://js.cytoscape.org/#layouts/circle
    type [<AllowNullLiteral>] CircleLayoutOptions =
        inherit LayoutOptions
        inherit ShapedLayoutOptions
        abstract name: string with get, set
        abstract radius: float option with get, set
        abstract startAngle: float with get, set
        abstract sweep: float option with get, set
        abstract clockwise: bool option with get, set

    /// http://js.cytoscape.org/#layouts/concentric
    type [<AllowNullLiteral>] ConcentricLayoutOptions =
        inherit LayoutOptions
        inherit ShapedLayoutOptions
        abstract name: string with get, set
        abstract startAngle: float with get, set
        abstract sweep: float option with get, set
        abstract clockwise: bool option with get, set
        abstract equidistant: obj with get, set
        abstract minNodeSpacing: obj with get, set
        abstract height: obj with get, set
        abstract width: obj with get, set
        abstract spacingFactor: obj with get, set
        abstract concentric: node: ConcentricLayoutOptionsConcentricNode -> float
        abstract levelWidth: node: ConcentricLayoutOptionsLevelWidthNode -> float

    type [<AllowNullLiteral>] ConcentricLayoutOptionsConcentricNode =
        abstract degree: unit -> float

    type [<AllowNullLiteral>] ConcentricLayoutOptionsLevelWidthNode =
        abstract maxDegree: unit -> float

    /// http://js.cytoscape.org/#layouts/breadthfirst
    type [<AllowNullLiteral>] BreadthFirstLayoutOptions =
        inherit LayoutOptions
        inherit ShapedLayoutOptions
        abstract name: string with get, set
        abstract directed: bool with get, set
        abstract circle: bool with get, set
        abstract roots: string option with get, set
        abstract maximalAdjustments: float with get, set

    /// http://js.cytoscape.org/#layouts/cose
    type [<AllowNullLiteral>] CoseLayoutOptions =
        inherit LayoutOptions
        inherit ShapedLayoutOptions
        abstract name: string with get, set
        abstract refresh: float with get, set
        abstract randomize: bool with get, set
        abstract componentSpacing: float with get, set
        abstract nodeRepulsion: node: obj option -> float
        abstract nodeOverlap: float with get, set
        abstract idealEdgeLength: edge: obj option -> float
        abstract edgeElasticity: edge: obj option -> float
        abstract nestingFactor: float with get, set
        abstract gravity: float with get, set
        abstract numIter: float with get, set
        abstract initialTemp: float with get, set
        abstract coolingFactor: float with get, set
        abstract minTemp: float with get, set
        abstract weaver: bool with get, set

    /// http://js.cytoscape.org/#layouts/layout-manipulation
    /// Layouts have a set of functions available to them,
    /// which allow for more complex behaviour than the primary run-one-layout-at-a-time usecase.
    /// A new, developer accessible layout can be made via cy.makeLayout().
    type [<AllowNullLiteral>] LayoutManipulation =
        /// Start running the layout
        /// http://js.cytoscape.org/#layout.run
        abstract run: unit -> LayoutManipulation
        abstract start: unit -> LayoutManipulation
        /// Stop running the (asynchronous/discrete) layout
        /// http://js.cytoscape.org/#layout.stop
        abstract stop: unit -> LayoutManipulation

    type [<AllowNullLiteral>] LayoutEvents =
        /// <summary>http://js.cytoscape.org/#layouts/layout-events</summary>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="handler">The handler function that is called
        /// when one of the specified events occurs.</param>
        abstract on: events: EventNames * handler: EventHandler -> LayoutEvents
        abstract on: events: EventNames * data: obj option * handler: EventHandler -> LayoutEvents
        abstract bind: events: EventNames * handler: EventHandler -> LayoutEvents
        abstract bind: events: EventNames * data: obj option * handler: EventHandler -> LayoutEvents
        abstract listen: events: EventNames * handler: EventHandler -> LayoutEvents
        abstract listen: events: EventNames * data: obj option * handler: EventHandler -> LayoutEvents
        abstract addListener: events: EventNames * handler: EventHandler -> LayoutEvents
        abstract addListener: events: EventNames * data: obj option * handler: EventHandler -> LayoutEvents
        /// Get a promise that is resolved with the first of any of
        /// the specified events triggered on the layout.
        /// http://js.cytoscape.org/#layout.promiseOn
        abstract promiseOn: events: EventNames -> Promise<EventObject>
        abstract pon: events: EventNames -> Promise<EventObject>
        /// <summary>Bind to events that are emitted by the layout, and trigger the handler only once.</summary>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="handler">The handler function that is called when one of the specified events occurs.</param>
        abstract one: events: EventNames * handler: EventHandler -> LayoutEvents
        abstract one: events: EventNames * data: obj option * handler: EventHandler -> LayoutEvents
        /// <summary>Remove event handlers on the layout.
        /// http://js.cytoscape.org/#layout.off</summary>
        /// <param name="events">A space separated list of event names.</param>
        /// <param name="handler">[optional] A reference to the handler function to remove.</param>
        abstract off: events: EventNames * ?handler: EventHandler -> LayoutEvents
        abstract unbind: events: EventNames * ?handler: EventHandler -> LayoutEvents
        abstract unlisten: events: EventNames * ?handler: EventHandler -> LayoutEvents
        abstract removeListener: events: EventNames * ?handler: EventHandler -> LayoutEvents
        /// <summary>Trigger one or more events on the layout.
        /// http://js.cytoscape.org/#layout.trigger</summary>
        /// <param name="events">A space separated list of event names to trigger.</param>
        /// <param name="extraParams">[optional] An array of additional parameters to pass to the handler.</param>
        abstract trigger: events: EventNames * ?extraParams: ResizeArray<obj option> -> LayoutEvents

    /// An animation represents a visible change in state over
    /// a duration of time for a single element.
    /// Animations can be generated via cy.animation()
    /// (for animations on the viewport) and ele.animation()
    /// (for animations on graph elements).
    /// http://js.cytoscape.org/#animations
    /// http://js.cytoscape.org/#animations/animation-manipulation
    type [<AllowNullLiteral>] AnimationManipulation =
        /// Requests that the animation be played, starting on the next frame.
        /// If the animation is complete, it restarts from the beginning.
        /// http://js.cytoscape.org/#ani.play
        abstract play: unit -> AnimationManipulation
        /// Get whether the animation is currently playing.
        /// http://js.cytoscape.org/#ani.playing
        abstract playing: unit -> bool
        /// Get or set how far along the animation has progressed.
        /// http://js.cytoscape.org/#ani.progress
        /// Get the progress of the animation in percent.
        abstract progress: unit -> float
        /// <summary>Set the progress of the animation in percent.</summary>
        /// <param name="progress">The progress in percent (i.e. between 0 and 1 inclusive) to set to the animation.</param>
        abstract progress: progress: float -> AnimationManipulation
        /// Get the progress of the animation in milliseconds.
        abstract time: unit -> float
        /// <summary>Set the progress of the animation in milliseconds.</summary>
        /// <param name="time">The progress in milliseconds
        /// (i.e. between 0 and the duration inclusive) to set to the animation.</param>
        abstract time: time: float -> AnimationManipulation
        /// Rewind the animation to the beginning.
        abstract rewind: unit -> AnimationManipulation
        /// Fastforward the animation to the end.
        abstract fastforward: unit -> AnimationManipulation
        /// Pause the animation, maintaining the current progress.
        /// http://js.cytoscape.org/#ani.pause
        abstract pause: unit -> AnimationManipulation
        /// Stop the animation, maintaining the current progress
        /// and removing the animation from any associated queues.
        /// http://js.cytoscape.org/#ani.stop
        abstract stop: unit -> AnimationManipulation
        /// Get whether the animation has progressed to the end.
        /// http://js.cytoscape.org/#ani.completed
        abstract completed: unit -> AnimationManipulation
        abstract complete: unit -> AnimationManipulation
        /// Apply the animation at its current progress.
        /// http://js.cytoscape.org/#ani.apply
        abstract apply: unit -> AnimationManipulation
        /// Get whether the animation is currently applying.
        /// http://js.cytoscape.org/#ani.applying
        abstract applying: unit -> AnimationManipulation
        /// Reverse the animation such that its starting
        /// conditions and ending conditions are reversed.
        /// http://js.cytoscape.org/#ani.reverse
        abstract reverse: unit -> AnimationManipulation
        /// <summary>Get a promise that is fulfilled with the specified animation event.</summary>
        /// <param name="animationEvent">A string for the event name; completed or complete for
        /// completing the animation or frame for the next frame of the animation.
        /// http://js.cytoscape.org/#ani.promise</param>
        abstract promise: ?animationEvent: U3<string, string, string> -> Promise<EventObject>

    type [<AllowNullLiteral>] Ext =
        [<Emit "$0($1...)">] abstract Invoke: cytoscape: (CytoscapeOptions -> Core) -> unit

    type [<AllowNullLiteral>] TypeLiteral_02 =
        abstract weight: float with get, set

    type [<AllowNullLiteral>] TypeLiteral_01 =
        [<Emit "$0[$1]{{=$2}}">] abstract Item: name: string -> obj option with get, set
